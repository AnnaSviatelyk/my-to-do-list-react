{"version":3,"sources":["assets/illustration.svg","helpers/helpers.js","sharedComponent/Line/Line.js","components/Header/Header.js","components/Buttons/AddTaskBtn.js","components/DoneExitBtns.js","components/EditBtnInput.js","context/task-context.js","components/Tasks/Task.js","components/Tasks/Tasks.js","components/AddTask/AddTask.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","makeid","length","result","characters","charactersLength","i","charAt","Math","floor","random","formatTime","time","line","className","now","Date","day","getDate","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","getCurrentTime","header","addTaskBtn","props","onClick","click","DoneExitBtns","update","cancel","InputAndBtns","value","spanHeight","change","closeTextArea","textAreaRef","useRef","useEffect","nextHeight","min","textAreaPaddingTop","parseFloat","window","getComputedStyle","current","getPropertyValue","style","height","console","log","scrollHeight","rows","spanHeightWithOneLine","type","autoFocus","ref","onChange","onKeyDown","event","keyCode","preventDefault","target","taskContext","React","createContext","Task","data","useContext","TaskContext","useState","isEdit","setIsEdit","setSpanHeight","description","initialValue","setNewValue","spanRef","documentClickHandler","classList","includes","closeEditTextArea","offsetHeight","document","addEventListener","removeEventListener","onUpdate","id","EditBtnInput","name","version","xmlns","xmlnsXlink","x","y","viewBox","enableBackground","xmlSpace","points","strokeLinecap","onAnimationEnd","finishedOrDeletedClickHandler","tasks","TransitionGroup","map","el","CSSTransition","key","timeout","classNames","addTask","cancelClick","onAdd","disabledClass","placeholder","App","state","JSON","parse","localStorage","getItem","isShownAddTaskInput","addInputValue","addNewTaskBtnHandler","setState","cancelAddingTaskHandler","addInputChangeHandler","addTaskBtnHandler","push","setItem","stringify","updatedTasks","filter","cur","taskUpdateHandler","forEach","src","illustration","alt","Provider","this","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3f1d088e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/illustration.bfcc6550.svg\";","//Generate Random String (creating a unique ID)\nexport function makeid(length = 5) {\n    let result = ''\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n    const charactersLength = characters.length\n    for (let i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength))\n    }\n    return result\n}\n\n\nexport function getCurrentTime() {\n\n    const now = new Date()\n    const day = now.getDate()\n\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    const curMonth = now.getMonth()\n    const month = months[curMonth]\n    const year = now.getFullYear()\n    let hours = now.getHours()\n    hours = formatTime(hours)\n    let minutes = now.getMinutes()\n    minutes = formatTime(minutes)\n\n    return { day, month, year, hours, minutes }\n}\n\nfunction formatTime(time) {\n    return time < 10 ? `0${time}` : time\n}","import React from 'react'\nimport './Line.scss'\nconst line = ({ className = '' }) => {\n    return (\n        <div className={`line ${className}`}></div>\n    )\n}\n\nexport default line ","import React from 'react'\nimport './Header.scss'\nimport { getCurrentTime } from '../../helpers/helpers'\nimport Line from '../../sharedComponent/Line/Line'\n\n\nconst { day, month, year, hours, minutes } = getCurrentTime();\n\n\nconst header = () => {\n    return (\n        <>\n            <header className=\"header\">\n                <div className=\"header__logo-data\">\n                    <h1 className=\"header__logo\">My To-Do List</h1>\n                    <span className=\"header__byme\">By Anna Sviatelyk</span>\n                </div>\n                <div className=\"header__date-and-time\">\n                    <span className=\"header__data-label\">Today</span>\n                    <span className=\"header__data header__data--date\">{month} {day}, {year}</span>\n                    <span className=\"header__data-label\">Time</span>\n                    <span className=\"header__data header__data--time\">{hours}:{minutes}</span>\n                </div>\n            </header>\n            <Line />\n        </>\n    )\n}\n\n\n\nexport default header","import React from 'react'\nimport './AddTaskBtn.scss'\n\n\n\nconst addTaskBtn = (props) => {\n    return (\n\n        <div className=\"new-item\" onClick={props.click}>\n            <i className=\"new-item__plus-icon\"></i>\n            <span className=\"new-item__label\">Add new task</span>\n        </div>\n\n    )\n}\n\nexport default addTaskBtn","import React from 'react'\nimport './Tasks/Task.scss'\n\n\nconst DoneExitBtns = ({ update, cancel }) => {\n    return (\n        <div className=\"task__btns\">\n            <i className=\"task__btn-done\" onClick={update}></i>\n            <i className=\"task__btn-exit-edit\" onClick={cancel}></i>\n        </div>\n    )\n\n}\n\nexport default DoneExitBtns","import React, { useEffect, useRef } from 'react'\nimport './Tasks/Task.scss'\nconst maxTextAreaHeight = 100\nconst spanHeightWithOneLine = 37\n\nconst InputAndBtns = ({ value, spanHeight, change, closeTextArea }) => {\n    const textAreaRef = useRef(null)\n    let className = value ? '' : 'task__edit-input-text--invalid'\n\n    useEffect(() => {\n        let nextHeight = Math.min(maxTextAreaHeight, spanHeight)\n        const textAreaPaddingTop = parseFloat(window.getComputedStyle(textAreaRef.current, null).getPropertyValue('padding-top'))\n        textAreaRef.current.style.height = nextHeight + (2 * textAreaPaddingTop) + 'px'\n        console.log(textAreaRef.current.scrollHeight)\n\n        if (value) {\n            textAreaRef.current.rows = 1\n            textAreaRef.current.style.height = 'auto'\n            nextHeight = Math.min(maxTextAreaHeight, textAreaRef.current.scrollHeight)\n            textAreaRef.current.style.height = nextHeight + 'px'\n        } else {\n            textAreaRef.current.style.height = spanHeightWithOneLine + 'px'\n        }\n\n    }, [value, spanHeight])\n\n    const keyPressHandler = (event) => {\n        if (event.keyCode === 13) {\n            event.preventDefault();\n            if (event.target.value !== '') {\n                closeTextArea()\n            }\n        }\n    }\n\n    return (\n        <textarea className={`task__edit-input-text ${className}`} type=\"text\" autoFocus ref={textAreaRef} onChange={change} onKeyDown={keyPressHandler} value={value} />\n    )\n\n}\n\n\nexport default InputAndBtns","import React from 'react'\n\nconst taskContext = React.createContext({})\n\nexport default taskContext","import React, { useState, useEffect, useRef, useContext } from 'react'\nimport './Task.scss'\nimport Line from '../../sharedComponent/Line/Line'\nimport DoneExitBtns from '../DoneExitBtns'\nimport EditBtnInput from '../EditBtnInput'\nimport TaskContext from '../../context/task-context'\n\nconst Task = ({ data }) => {\n    const taskContext = useContext(TaskContext)\n\n    const [isEdit, setIsEdit] = useState(false)\n    const [spanHeight, setSpanHeight] = useState(37)\n    const [initialValue, setNewValue] = useState(data.description)\n\n\n    const spanRef = useRef(null)\n\n\n    const documentClickHandler = (event) => {\n        const ignoringElements = ['task__edit-input-text', 'task__btn-done', 'task__btn-exit-edit']\n        const className = event.target.classList[0]\n        if (!ignoringElements.includes(className)) { closeEditTextArea() }\n    }\n\n    const openEditTextArea = () => {\n        setIsEdit(true)\n    }\n\n    useEffect(() => {\n        const spanHeight = spanRef.current.offsetHeight\n        setSpanHeight(spanHeight)\n    }, [])\n\n    useEffect(() => {\n        if (isEdit) {\n            document.addEventListener('click', documentClickHandler)\n        }\n        return () => document.removeEventListener('click', documentClickHandler)\n    }, [isEdit])\n\n\n    const closeEditTextArea = () => {\n        setIsEdit(false)\n        taskContext.onUpdate(initialValue, data.id)\n    }\n\n    const updateValue = (event) => {\n        const value = event.target.value\n        setNewValue(value)\n    }\n\n\n    const cancelValueUpdate = () => {\n        setIsEdit(false)\n        setNewValue(data.description)\n    }\n\n\n    return (\n\n        <div className=\"task\">\n            <div className=\"task__content-wrapper\">\n                <div className=\"task__description\">\n                    {isEdit ? <EditBtnInput change={updateValue} closeTextArea={closeEditTextArea} value={initialValue} spanHeight={spanHeight} /> : (\n                        <>\n                            <label className='task__checkbox' >\n                                <input type=\"checkbox\" name=\"check\" />\n                                <svg version=\"1.1\" className=\"task__checkbox_svg\" xmlns=\"http://www.w3.org/2000/svg\"\n                                    xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\"\n                                    style={{ enableBackground: \"new 0 0 100 100\" }} xmlSpace=\"preserve\">\n                                    <polyline className=\"task__checkbox_line\" points=\"3.5,45.5 40.5,82.5 95.7,15.3 \"\n                                        strokeLinecap=\"round\" onAnimationEnd={() => taskContext.finishedOrDeletedClickHandler(data.id)} /></svg>\n                            </label>\n\n                            <span className=\"task__name\" ref={spanRef}>{initialValue}</span>\n                        </>\n                    )}\n                </div>\n                {isEdit ?\n                    <DoneExitBtns update={closeEditTextArea} cancel={cancelValueUpdate} />\n                    :\n                    (<div className=\"task__btns\">\n                        <i className=\"task__btn-edit\" onClick={openEditTextArea}></i>\n                        <i className=\"task__btn-delete\" onClick={() => taskContext.finishedOrDeletedClickHandler(data.id)}></i>\n                    </div>)\n                }\n            </div>\n            <Line className='line__in-task' />\n        </div >\n    )\n\n}\n\nexport default Task","import React from 'react'\nimport './Tasks.scss'\nimport Task from './Task'\nimport './Task.scss'\nimport {\n    CSSTransition,\n    TransitionGroup,\n} from 'react-transition-group';\n\n\nconst tasks = ({ tasks }) => {\n\n    return (\n        <TransitionGroup className=\"tasks-container\">\n            {\n                tasks.map(el => {\n                    return (\n                        <CSSTransition\n                            key={el.id}\n                            timeout={300}\n                            classNames=\"task\"\n                        >\n                            <Task data={el} />\n                        </CSSTransition>\n                    )\n                })\n            }\n\n        </TransitionGroup>\n    )\n\n}\n\nexport default tasks","import React from 'react'\nimport './AddTask.scss'\n\n\nconst addTask = ({ value, cancelClick, onChange, onAdd }) => {\n    const keyPressHandler = (event) => {\n\n        if (event.keyCode === 13) {\n            event.preventDefault();\n            if (event.target.value !== '') {\n                onAdd(value.length)\n            }\n        }\n    }\n\n    const disabledClass = value.length ? '' : ' add-new-item__btn-add-task--disabled'\n    return (\n        <div className=\"add-new-item\">\n            <div className=\"add-new-item__description-field\">\n                <input\n                    type=\"text\"\n                    className=\"add-new-item__description\"\n                    placeholder=\"E.g. Start working on new project...\"\n                    onChange={onChange}\n                    onKeyDown={keyPressHandler}\n                />\n            </div>\n\n            <div className=\"add-new-item__buttons\">\n                <button className={`add-new-item__btn-add-task ${disabledClass}`} onClick={() => onAdd(value.length)}> Add task</button>\n                <button className=\"add-new-item__btn-cancel\" onClick={cancelClick}>Cancel</button>\n            </div>\n        </div>\n    )\n}\n\nexport default addTask","import React, { Component } from 'react';\nimport './App.css';\nimport Header from '../components/Header/Header'\nimport illustration from '../assets/illustration.svg'\nimport AddTaskBtn from '../components/Buttons/AddTaskBtn'\nimport Tasks from '../components/Tasks/Tasks'\nimport AddTask from '../components/AddTask/AddTask'\nimport { makeid } from '../helpers/helpers'\nimport TaskContext from '../context/task-context'\n\nclass App extends Component {\n  state = {\n    tasks: JSON.parse(localStorage.getItem('tasks')) || [],\n    isShownAddTaskInput: false,\n    addInputValue: '',\n\n  }\n\n  addNewTaskBtnHandler = () => {\n    this.setState({ isShownAddTaskInput: true })\n\n  }\n\n  cancelAddingTaskHandler = () => {\n    this.setState({\n      isShownAddTaskInput: false,\n      addInputValue: ''\n    })\n  }\n\n  addInputChangeHandler = (event) => {\n    this.setState({\n      addInputValue: event.target.value\n    })\n\n  }\n\n  addTaskBtnHandler = (length) => {\n    if (length > 0) {\n      const tasks = [...this.state.tasks]\n      tasks.push({\n        description: this.state.addInputValue,\n        id: makeid()\n      })\n\n      this.setState({\n        tasks: tasks,\n        isShownAddTaskInput: false,\n        addInputValue: ''\n      })\n\n      localStorage.setItem('tasks', JSON.stringify(tasks))\n    }\n  }\n\n  finishedOrDeletedClickHandler = (id) => {\n    const tasks = [...this.state.tasks]\n    const updatedTasks = tasks.filter(cur => cur.id !== id)\n\n    this.setState({\n      tasks: updatedTasks\n    })\n\n    localStorage.setItem('tasks', JSON.stringify(updatedTasks))\n  }\n\n\n  taskUpdateHandler = (value, id) => {\n    const tasks = [...this.state.tasks]\n    tasks.forEach(cur => {\n      if (cur.id === id) {\n        cur.description = value\n      }\n    })\n\n    this.setState({\n      tasks: tasks\n    })\n\n    localStorage.setItem('tasks', JSON.stringify(tasks))\n  }\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <Header />\n        <img src={illustration} alt=\"time management illustration\" className=\"illustration\" />\n        <TaskContext.Provider value={{\n          finishedOrDeletedClickHandler: this.finishedOrDeletedClickHandler,\n          onUpdate: this.taskUpdateHandler\n        }}>\n          <Tasks\n            tasks={this.state.tasks}\n          />\n        </TaskContext.Provider >\n        {this.state.isShownAddTaskInput ?\n          <AddTask\n            cancelClick={this.cancelAddingTaskHandler}\n            value={this.state.addInputValue}\n            onChange={this.addInputChangeHandler}\n            onAdd={this.addTaskBtnHandler}\n          /> : <AddTaskBtn click={this.addNewTaskBtnHandler} />}\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}