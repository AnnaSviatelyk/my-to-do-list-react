{"version":3,"sources":["assets/illustration.svg","store/actions/auth.js","store/actions/actionTypes.js","helpers/helpers.js","sharedComponent/Line/Line.js","components/Logo/Logo.js","components/Buttons/AuthBtns/AuthBtn/AuthBtn.js","components/Header/Header.js","components/Buttons/addNewTaskButton.js","components/Buttons/DoneExitBtns.js","components/Buttons/EditBtnInput.js","components/Tasks/Task.js","store/actions/to-do-list.js","components/Tasks/Tasks.js","components/AddTask/AddTask.js","containers/ToDoList/ToDoList.js","components/Buttons/AuthBtns/AuthBtns.js","sharedComponent/Backdrop/Backdrop.js","sharedComponent/Modal/Modal.js","components/Input/Input.js","containers/Auth/Auth.js","sharedComponent/Spinner/Spinner.js","containers/Main/Main.js","containers/Auth/Logout/Logout.js","App.js","serviceWorker.js","store/utility.js","store/reducers/auth.js","store/reducers/to-do-list.js","index.js"],"names":["module","exports","authSuccess","token","userId","type","idToken","logout","localStorage","removeItem","authCheckState","dispatch","expirationTime","getItem","expirationDate","Date","getTime","setTimeout","formatTime","time","line","className","Logo","authBtn","children","click","disabled","onClick","now","day","getDate","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","getCurrentTime","connect","onLogout","actions","to","addTaskBtn","props","DoneExitBtns","update","cancel","InputAndBtns","value","spanHeight","change","closeTextArea","textAreaRef","useRef","useEffect","nextHeight","Math","min","textAreaPaddingTop","parseFloat","window","getComputedStyle","current","getPropertyValue","style","height","rows","scrollHeight","spanHeightWithOneLine","autoFocus","ref","onChange","onKeyDown","event","keyCode","preventDefault","target","length","state","tasks","todo","auth","onFinishOrDeleteTask","taskId","a","queryParams","axios","delete","id","response","data","error","message","toLowerCase","split","join","onPutTaskUpdate","task","console","log","put","description","then","res","catch","errorMessage","putTaskFail","useState","isEdit","setIsEdit","setSpanHeight","initialValue","setNewValue","spanRef","documentClickHandler","classList","includes","closeEditTextArea","offsetHeight","document","addEventListener","removeEventListener","finishOrDeleteTask","EditBtnInput","name","version","xmlns","xmlnsXlink","x","y","viewBox","enableBackground","xmlSpace","points","strokeLinecap","onAnimationEnd","Tasks","TransitionGroup","map","el","CSSTransition","key","timeout","classNames","AddTask","cancelClick","onAdd","placeholder","ToDoList","isShownAddTaskInput","addInputValue","addNewTaskBtnHandler","setState","cancelAddingTaskHandler","addInputChangeHandler","addTaskBtnHandler","newTask","postTasks","this","onFetchTasks","src","illustration","alt","Component","post","postTasksSuccess","postTasksFail","get","fetchedTasks","push","fetchTasksFail","authBtns","backdrop","clicked","show","Modal","backDropClick","transform","opacity","input","elementConfig","invalid","shouldValidate","touched","changed","label","inputClasses","inputElement","Auth","controls","userName","valid","validation","required","onlyLettersAndNumbers","minLength","password","switchAuthModeHandler","onAuthSwitchMode","isSignUp","inputChangedHandler","controlName","updatedControls","checkValidity","submitHandler","onAuth","rules","isValid","trim","test","formElementsArr","config","form","formElement","onSubmit","username","authData","email","returnSecureToken","url","expiresIn","setItem","localId","authFail","spinner","Main","history","isFormShown","onBackdropClick","loading","AuthBtns","onAuthBtnClick","Logout","App","onTryAutoSignUp","routes","path","component","isAuth","from","withRouter","Boolean","location","hostname","match","updateObj","oldObj","updatedProps","initialState","authStart","action","switchAuthMode","authLogout","authBtnClick","closeForm","reducer","fetchTasksSuccess","updatedTasks","putTaskSuccess","forEach","cur","deleteOrFinishTaskSuccess","filter","deleteOrFinishTaskFail","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","todoReducer","authReducer","store","createStore","applyMiddleware","thunk","app","basename","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1a1f763b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/illustration.bfcc6550.svg\";","import * as actionTypes from './actionTypes'\nimport axios from 'axios'\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START\n    }\n}\n\nexport const authSuccess = (token, userId) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        idToken: token,\n        userId: userId\n\n    }\n}\n\nexport const authBtnClick = (isSignUp, isFormShown) => {\n    return {\n        type: actionTypes.AUTH_BTN_CLICK,\n        isSignUp,\n        isFormShown\n    }\n}\n\nexport const authFail = (error) => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error\n\n    }\n}\n\nexport const closeForm = () => {\n    return {\n        type: actionTypes.CLOSE_FORM,\n        isFormShown: false,\n        error: null\n    }\n}\n\nexport const switchAuthMode = (isSignUp) => {\n    return {\n        type: actionTypes.SWITCH_AUTH_MODE,\n        isSignUp\n    }\n}\n\nexport const checkAuthTimeOut = (expirationTime) => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout())\n        }, expirationTime * 1000)\n    }\n\n}\n\nexport const logout = () => {\n    localStorage.removeItem('token')\n    localStorage.removeItem('expirationDate')\n    localStorage.removeItem('userId')\n    return {\n        type: actionTypes.AUTH_LOGOUT\n    }\n}\n\n\nexport const auth = (username, password, isSignUp) => {\n    return dispatch => {\n        dispatch(authStart())\n\n        const authData = {\n            username: username,\n            email: `${username}@todo.list`,\n            password: password,\n            returnSecureToken: true\n        }\n\n        let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBTkC5sKi6tMveqTPRvodHeA42E495rGng'\n\n        if (!isSignUp) {\n            url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBTkC5sKi6tMveqTPRvodHeA42E495rGng'\n        }\n\n        axios.post(url, authData)\n            .then(response => {\n                const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000)\n                localStorage.setItem('token', response.data.idToken)\n                localStorage.setItem('expirationDate', expirationDate)\n                localStorage.setItem('userId', response.data.localId)\n                dispatch(authSuccess(response.data.idToken, response.data.localId))\n            })\n            .catch(error => {\n                const errorMessage = error.response.data.error.message.toLowerCase().split('_').join(' ')\n\n                dispatch(authFail(errorMessage))\n            })\n    }\n}\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token')\n        if (!token) {\n            dispatch(logout())\n        } else {\n            const expirationDate = new Date(localStorage.getItem('expirationDate'))\n            if (expirationDate <= new Date()) {\n                dispatch(logout())\n            } else {\n                const userId = localStorage.getItem('userId')\n                dispatch(authSuccess(token, userId))\n                dispatch(checkAuthTimeOut((expirationDate.getTime() - new Date().getTime()) / 1000))\n            }\n        }\n    }\n}","//AUTH ACTIONS\nexport const AUTH_START = 'AUTH_START'\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS'\nexport const AUTH_FAIL = 'AUTH_FAIL'\nexport const SWITCH_AUTH_MODE = 'SWITCH_AUTH_MODE'\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT'\n\nexport const AUTH_BTN_CLICK = 'AUTH_BTN_CLICK'\nexport const CLOSE_FORM = 'CLOSE_FORM'\n\n\n\n//TO-DO-LIST ACTIONS\nexport const ADD_TASK = 'ADD_TASK'\nexport const FINISH_OR_DELETE_TASK = 'FINISH_OR_DELETE_TASK'\nexport const UPDATE_TASK = 'UPDATE_TASK'\n\nexport const POST_TASKS_START = 'POST_POST_TASKS_START'\nexport const POST_TASKS_SUCCESS = 'POST_TASKS_SUCCESS'\nexport const POST_TASKS_FAIL = 'POST_TASKS_FAIL'\n\nexport const PUT_TASK_SUCCESS = 'PUT_TASK_SUCCESS'\nexport const PUT_TASK_FAIL = 'PUT_TASK_FAIL'\n\nexport const DELETE_OR_FINISH_TASK_FAIL = 'DELETE_OR_FINISH_TASK_FAIL'\nexport const DELETE_OR_FINISH_TASK_SUCCESS = 'DELETE_OR_FINISH_TASK_SUCCESS'\n\nexport const FETCH_TASKS_START = 'FETCH_TASKS_START'\nexport const FETCH_TASKS_SUCCESS = 'FETCH_TASKS_SUCCESS'\nexport const FETCH_TASKS_FAIL = 'FETCH_TASKS_FAIL'\n\n\n","//Generate Random String (creating a unique ID)\nexport function makeid(length = 5) {\n    let result = ''\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n    const charactersLength = characters.length\n    for (let i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength))\n    }\n    return result\n}\n\n\nexport function getCurrentTime() {\n\n    const now = new Date()\n    const day = now.getDate()\n\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    const curMonth = now.getMonth()\n    const month = months[curMonth]\n    const year = now.getFullYear()\n    let hours = now.getHours()\n    hours = formatTime(hours)\n    let minutes = now.getMinutes()\n    minutes = formatTime(minutes)\n\n    return { day, month, year, hours, minutes }\n}\n\nfunction formatTime(time) {\n    return time < 10 ? `0${time}` : time\n}","import React from 'react'\nimport './Line.scss'\nconst line = ({ className = '' }) => {\n    return (\n        <div className={`line ${className}`}></div>\n    )\n}\n\nexport default line ","import React from 'react'\nimport './Logo.scss'\n\nconst Logo = () => (\n    <div>\n        <h1 className=\"logo\">My To-Do List</h1>\n        <span className=\"logo__author\">By Anna Sviatelyk</span>\n    </div>\n)\n\nexport default Logo","import React from 'react'\nimport './AuthBtn.scss'\n\n\nconst authBtn = ({ children, type, click, disabled }) => {\n    let className = null\n    if (type === 'with-background') { className = 'authBtn' }\n    if (type === 'with-border') { className = 'authBtn authBtn--with-border' }\n    if (type === 'text-btn') { className = 'authBtn authBtn--text' }\n    if (type === 'with-background-wide') { className = 'authBtn authBtn--wide' }\n\n    return (\n        <button className={className} onClick={click} disabled={disabled}>{children}</button>\n    )\n\n}\n\n\nexport default authBtn","import React from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions/index'\nimport './Header.scss'\nimport { getCurrentTime } from '../../helpers/helpers'\nimport Line from '../../sharedComponent/Line/Line'\nimport Logo from '../Logo/Logo'\nimport { NavLink } from 'react-router-dom'\nimport AuthBtn from '../Buttons/AuthBtns/AuthBtn/AuthBtn'\n\n\nconst { day, month, year, hours, minutes } = getCurrentTime();\n\n\nconst Header = ({ onLogout }) => {\n    return (\n        <>\n            <header className=\"header\">\n                <Logo />\n                <div className=\"header__date-and-time\">\n                    <span className=\"header__data-label\">Today</span>\n                    <span className=\"header__data header__data--date\">{month} {day}, {year}</span>\n                    <span className=\"header__data-label\">Time</span>\n                    <span className=\"header__data header__data--time\">{hours}:{minutes}</span>\n                </div>\n                <NavLink to={'/logout'}><AuthBtn type='with-background' onClick={onLogout}>Logout</AuthBtn></NavLink>\n            </header>\n            <Line />\n        </>\n    )\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onLogout: () => dispatch(actions.logout())\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(Header)","import React from 'react'\nimport './addNewTaskButton.scss'\n\nconst addTaskBtn = (props) => {\n    return (\n        <div className=\"new-item\" onClick={props.click}>\n            <i className=\"new-item__plus-icon\"></i>\n            <span className=\"new-item__label\">{props.children}</span>\n        </div>\n    )\n}\n\nexport default addTaskBtn","import React from 'react'\nimport '../Tasks/Task.scss'\n\n\nconst DoneExitBtns = ({ update, cancel }) => {\n    return (\n        <div className=\"task__btns\">\n            <i className=\"task__btn-done\" onClick={update}></i>\n            <i className=\"task__btn-exit-edit\" onClick={cancel}></i>\n        </div>\n    )\n\n}\n\nexport default DoneExitBtns","import React, { useEffect, useRef } from 'react'\nimport '../Tasks/Task.scss'\n\nconst maxTextAreaHeight = 100\nconst spanHeightWithOneLine = 37\n\nconst InputAndBtns = ({ value, spanHeight, change, closeTextArea }) => {\n    const textAreaRef = useRef(null)\n    let className = value ? '' : 'task__edit-input-text--invalid'\n\n    useEffect(() => {\n        let nextHeight = Math.min(maxTextAreaHeight, spanHeight)\n        const textAreaPaddingTop = parseFloat(window.getComputedStyle(textAreaRef.current, null).getPropertyValue('padding-top'))\n        textAreaRef.current.style.height = nextHeight + (2 * textAreaPaddingTop) + 'px'\n\n        if (value) {\n            textAreaRef.current.rows = 1\n            textAreaRef.current.style.height = 'auto'\n            nextHeight = Math.min(maxTextAreaHeight, textAreaRef.current.scrollHeight)\n            textAreaRef.current.style.height = nextHeight + 'px'\n        } else {\n            textAreaRef.current.style.height = spanHeightWithOneLine + 'px'\n        }\n\n    }, [value, spanHeight])\n\n    const keyPressHandler = (event) => {\n        if (event.keyCode === 13) {\n            event.preventDefault();\n            if (event.target.value.length > 0) {\n                closeTextArea()\n            }\n        }\n    }\n\n    return (\n        <textarea\n            className={`task__edit-input-text ${className}`}\n            type=\"text\"\n            autoFocus\n            ref={textAreaRef}\n            onChange={change}\n            onKeyDown={keyPressHandler}\n            value={value} />\n    )\n\n}\n\n\nexport default InputAndBtns","import React, { useState, useEffect, useRef } from 'react'\nimport { connect } from 'react-redux'\nimport './Task.scss'\nimport Line from '../../sharedComponent/Line/Line'\nimport DoneExitBtns from '../Buttons/DoneExitBtns'\nimport EditBtnInput from '../Buttons/EditBtnInput'\nimport * as actions from '../../store/actions/index'\n\n\nconst Task = ({ data, onFinishOrDeleteTask, onPutTaskUpdate, token, userId }) => {\n    const [isEdit, setIsEdit] = useState(false)\n    const [spanHeight, setSpanHeight] = useState(37)\n    const [initialValue, setNewValue] = useState(data.description)\n    const spanRef = useRef(null)\n\n    const task = {\n        description: initialValue,\n        userId: userId\n    }\n\n    const documentClickHandler = (event) => {\n        const ignoringElements = ['task__edit-input-text', 'task__btn-done', 'task__btn-exit-edit']\n        const className = event.target.classList[0]\n        if (!ignoringElements.includes(className)) { closeEditTextArea() }\n    }\n\n    const openEditTextArea = () => { setIsEdit(true) }\n\n    useEffect(() => {\n        const spanHeight = spanRef.current.offsetHeight\n        setSpanHeight(spanHeight)\n    }, [])\n\n    useEffect(() => {\n        if (isEdit) {\n            document.addEventListener('click', documentClickHandler)\n        }\n        return () => document.removeEventListener('click', documentClickHandler)\n        // eslint-disable-next-line\n    }, [isEdit, initialValue])\n\n\n    const closeEditTextArea = () => {\n        if (initialValue.length > 0) {\n            setIsEdit(false)\n            onPutTaskUpdate(token, task, data.id, userId)\n        }\n    }\n\n    const updateValue = (event) => {\n        const value = event.target.value\n        setNewValue(value)\n    }\n\n    const cancelValueUpdate = () => {\n        setIsEdit(false)\n        setNewValue(data.description)\n    }\n\n    const finishOrDeleteTask = () => {\n        onFinishOrDeleteTask(token, data.id, userId)\n    }\n\n    return (\n        <div className=\"task\">\n            <div className=\"task__content-wrapper\">\n                <div className=\"task__description\">\n                    {isEdit ? <EditBtnInput change={updateValue} closeTextArea={closeEditTextArea} value={initialValue} spanHeight={spanHeight} /> : (\n                        <>\n                            <label className='task__checkbox' >\n                                <input type=\"checkbox\" name=\"check\" />\n                                <svg version=\"1.1\" className=\"task__checkbox_svg\" xmlns=\"http://www.w3.org/2000/svg\"\n                                    xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\"\n                                    style={{ enableBackground: \"new 0 0 100 100\" }} xmlSpace=\"preserve\">\n                                    <polyline className=\"task__checkbox_line\" points=\"3.5,45.5 40.5,82.5 95.7,15.3 \"\n                                        strokeLinecap=\"round\" onAnimationEnd={finishOrDeleteTask} /></svg>\n                            </label>\n\n                            <span className=\"task__name\" ref={spanRef}>{initialValue}</span>\n                        </>\n                    )}\n                </div>\n                {isEdit ?\n                    <DoneExitBtns update={closeEditTextArea} cancel={cancelValueUpdate} />\n                    :\n                    (<div className=\"task__btns\">\n                        <i className=\"task__btn-edit\" onClick={openEditTextArea}></i>\n                        <i className=\"task__btn-delete\" onClick={finishOrDeleteTask}></i>\n                    </div>)\n                }\n            </div>\n            <Line className='line__in-task' />\n        </div >\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        tasks: state.todo.tasks,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFinishOrDeleteTask: (token, taskId, userId) => dispatch(actions.deleteTask(token, taskId, userId)),\n        onPutTaskUpdate: (token, task, taskId, userId) => dispatch(actions.putTask(token, task, taskId, userId))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Task)","import * as actionTypes from './actionTypes'\nimport axios from 'axios'\n\n\n//FETCH\nexport const fetchTasksSuccess = (tasks) => {\n    return {\n        type: actionTypes.FETCH_TASKS_SUCCESS,\n        tasks\n    }\n}\n\nexport const fetchTasksFail = (error) => {\n    return {\n        type: actionTypes.FETCH_TASKS_FAIL,\n        error\n    }\n}\n\nexport const fetchTasks = (token, userId) => {\n    return dispatch => {\n        const queryParams = '?auth=' + token\n        axios.get('https://my-to-do-list-on-react.firebaseio.com/tasks/' + userId + '.json' + queryParams)\n            .then(res => {\n                const fetchedTasks = []\n                for (let key in res.data) {\n                    fetchedTasks.push({\n                        ...res.data[key],\n                        id: key\n                    })\n                }\n                dispatch(fetchTasksSuccess(fetchedTasks ? fetchedTasks : []))\n            })\n            .catch(error => {\n                const errorMessage = error.response.data.error.message.toLowerCase().split('_').join(' ')\n                dispatch(fetchTasksFail(errorMessage))\n            }\n            )\n    }\n}\n\n//POST\nexport const postTasksSuccess = (task) => {\n    return {\n        type: actionTypes.POST_TASKS_SUCCESS,\n        task\n    }\n}\n\nexport const postTasksFail = (error) => {\n    return {\n        type: actionTypes.POST_TASKS_FAIL,\n        error\n    }\n}\n\nexport const postTask = (token, task) => {\n    return dispatch => {\n        axios.post('https://my-to-do-list-on-react.firebaseio.com/tasks/' + task.userId + '.json?auth=' + token, { ...task })\n            .then(res => {\n                dispatch(postTasksSuccess({ ...task, id: res.data.name }))\n            })\n            .catch(error => {\n                const errorMessage = error.response.data.error.message.toLowerCase().split('_').join(' ')\n                dispatch(postTasksFail(errorMessage))\n            })\n\n    }\n}\n\n//PUT\nexport const putTaskSuccess = (description, id) => {\n    return {\n        type: actionTypes.PUT_TASK_SUCCESS,\n        description,\n        id\n\n    }\n}\n\nexport const putTaskFail = (error) => {\n    return {\n        type: actionTypes.PUT_TASK_FAIL,\n        error\n    }\n}\n\nexport const putTask = (token, task, taskId, userId) => {\n    console.log(taskId)\n    return dispatch => {\n        const queryParams = '?auth=' + token\n        axios.put('https://my-to-do-list-on-react.firebaseio.com/tasks/' + userId + '/' + taskId + '.json' + queryParams, { ...task, description: task.description })\n            .then(res => {\n                dispatch(putTaskSuccess(task.description, taskId))\n            })\n            .catch(error => {\n                const errorMessage = error.response.data.error.message.toLowerCase().split('_').join(' ')\n                dispatch(putTaskFail(errorMessage))\n            })\n    }\n}\n\n\n//DELETE\nexport const deleteOrFinishTaskSuccess = (id) => {\n    return {\n        type: actionTypes.DELETE_OR_FINISH_TASK_SUCCESS,\n        id\n    }\n}\n\nexport const deleteOrFinishTaskFail = () => {\n    return {\n        type: actionTypes.DELETE_OR_FINISH_TASK_FAIL\n    }\n}\n\nexport const deleteTask = (token, taskId, userId) => {\n    return async dispatch => {\n        try {\n            const queryParams = '?auth=' + token\n            await axios.delete('https://my-to-do-list-on-react.firebaseio.com/tasks/' + userId + '/' + taskId + '.json' + queryParams)\n            dispatch(deleteOrFinishTaskSuccess(taskId))\n\n        } catch (error) {\n            const errorMessage = error.response.data.error.message.toLowerCase().split('_').join(' ')\n            dispatch(deleteOrFinishTaskFail(errorMessage))\n\n        }\n    }\n}\n\n","import React from 'react'\nimport './Tasks.scss'\nimport Task from './Task'\nimport './Task.scss'\nimport {\n    CSSTransition,\n    TransitionGroup,\n} from 'react-transition-group';\n\n\n\nconst Tasks = ({ tasks }) => {\n\n    return (\n        <TransitionGroup className=\"tasks-container\">\n            {\n                tasks.map(el => {\n                    return (\n                        <CSSTransition\n                            key={el.id}\n                            timeout={300}\n                            classNames=\"task\"\n                        >\n                            <Task data={el} />\n                        </CSSTransition>\n                    )\n                })\n            }\n\n        </TransitionGroup>\n    )\n\n}\n\nexport default Tasks","import React from 'react'\nimport './AddTask.scss'\n\n\nconst AddTask = ({ value, cancelClick, onChange, onAdd }) => {\n    const keyPressHandler = (event) => {\n        if (event.keyCode === 13) {\n            event.preventDefault();\n            if (event.target.value !== '') {\n                onAdd(value.length)\n            }\n        }\n    }\n\n    return (\n        <div className=\"add-new-item\">\n            <div className=\"add-new-item__description-field\">\n                <input\n                    type=\"text\"\n                    className=\"add-new-item__description\"\n                    placeholder=\"E.g. Start working on new project...\"\n                    onChange={onChange}\n                    onKeyDown={keyPressHandler}\n                />\n            </div>\n\n            <div className=\"add-new-item__buttons\">\n                <button className={`add-new-item__btn-add-task ${value.length ? '' : ' add-new-item__btn-add-task--disabled'}`} onClick={() => onAdd(value.length)}> Add task</button>\n                <button className=\"add-new-item__btn-cancel\" onClick={cancelClick}>Cancel</button>\n            </div>\n        </div>\n    )\n}\n\nexport default AddTask","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport './ToDoList.scss';\nimport Header from '../../components/Header/Header'\nimport illustration from '../../assets/illustration.svg'\nimport AddTaskBtn from '../../components/Buttons/addNewTaskButton'\nimport Tasks from '../../components/Tasks/Tasks'\nimport AddTask from '../../components/AddTask/AddTask'\nimport * as actions from '../../store/actions/index'\n\n\nclass ToDoList extends Component {\n    state = {\n        isShownAddTaskInput: false,\n        addInputValue: '',\n    }\n\n    componentDidMount() {\n        this.props.onFetchTasks(this.props.token, this.props.userId)\n    }\n\n\n    addNewTaskBtnHandler = () => { this.setState({ isShownAddTaskInput: true }) }\n\n    cancelAddingTaskHandler = () => {\n        this.setState({\n            isShownAddTaskInput: false,\n            addInputValue: ''\n        })\n    }\n\n    addInputChangeHandler = (event) => {\n        this.setState({\n            addInputValue: event.target.value\n        })\n    }\n\n    addTaskBtnHandler = (length) => {\n        if (length > 0) {\n            const newTask = {\n                description: this.state.addInputValue,\n                userId: this.props.userId\n            }\n\n            this.props.postTasks(this.props.token, newTask)\n            this.setState({\n                isShownAddTaskInput: false,\n                addInputValue: ''\n            })\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Header />\n                <img src={illustration} alt=\"time management illustration\" className=\"illustration\" />\n                <Tasks tasks={this.props.tasks} />\n                {this.state.isShownAddTaskInput ?\n                    <AddTask\n                        cancelClick={this.cancelAddingTaskHandler}\n                        value={this.state.addInputValue}\n                        onChange={this.addInputChangeHandler}\n                        onAdd={this.addTaskBtnHandler}\n                    /> : <AddTaskBtn click={this.addNewTaskBtnHandler}>Add new task</AddTaskBtn>}\n\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        tasks: state.todo.tasks,\n        token: state.auth.token,\n        userId: state.auth.userId,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        postTasks: (token, tasks, userId) => dispatch(actions.postTask(token, tasks, userId)),\n        onFetchTasks: (token, userId) => dispatch(actions.fetchTasks(token, userId))\n    }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ToDoList)\n","import React from 'react'\nimport AuthBtn from './AuthBtn/AuthBtn'\n\nconst authBtns = ({ click }) => (\n    <div className='authBtns-container'>\n        <AuthBtn type='with-border' click={() => click(false, true)}>Login</AuthBtn>\n        <AuthBtn type='with-background' click={() => click(true, true)}>Register</AuthBtn>\n    </div>\n)\n\nexport default authBtns","import React from 'react'\nimport './Backdrop.scss'\n\nconst backdrop = ({ clicked, show }) => (\n    show ? <div className='Backdrop' onClick={clicked}></div> : null\n)\n\nexport default backdrop","import React, { Component } from 'react'\nimport Backdrop from '../Backdrop/Backdrop'\nimport './Modal.scss'\n\nclass Modal extends Component {\n    render() {\n        return (\n            <>\n                <Backdrop show={this.props.show} clicked={this.props.backDropClick} />\n                <div\n                    className='Modal'\n                    style={{\n                        transform: this.props.show ? 'translateY(0)' : 'translateY(-100vh)',\n                        opacity: this.props.show ? '1' : 0\n                    }}>\n                    {this.props.children}\n                </div>\n            </>\n        )\n    }\n}\n\n\nexport default Modal","import React from 'react'\nimport './Input.scss'\n\nconst input = ({ elementConfig, invalid, shouldValidate, touched, value, changed, label }) => {\n    const inputClasses = ['input']\n\n    if (invalid && shouldValidate && touched) {\n        inputClasses.push('input--invalid')\n    }\n\n    let inputElement = <input\n        className={inputClasses.join(' ')}\n        {...elementConfig}\n        value={value}\n        onChange={changed}\n    />\n\n    return (\n        <div className='Input'>\n            <label className='Label'>{label}</label>\n            {inputElement}\n            {/* {validationError} */}\n        </div>\n    )\n}\n\n\nexport default input","import React, { Component, Fragment } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions/index'\nimport './Auth.scss'\nimport Input from '../../components/Input/Input'\nimport AuthBtn from '../../components/Buttons/AuthBtns/AuthBtn/AuthBtn'\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            userName: {\n                elementConfig: {\n                    type: 'input',\n                    placeholder: \"User Name\"\n                },\n                value: '',\n                touched: false,\n                valid: false,\n                validation: {\n                    required: true,\n                    onlyLettersAndNumbers: true,\n                    minLength: 4\n                }\n            },\n\n            password: {\n                elementConfig: {\n                    type: 'password',\n                    placeholder: \"Password\"\n                },\n                value: '',\n                touched: false,\n                valid: false,\n                validation: {\n                    required: true,\n                    minLength: 6\n                }\n            },\n        },\n        errorMessage: this.props.errorMessage\n    }\n\n    checkValidity(value, rules) {\n        let isValid = true;\n\n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.onlyLettersAndNumbers) {\n            const pattern = /^[0-9a-zA-Z]+$/\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n        return isValid;\n    }\n\n    switchAuthModeHandler = () => { this.props.onAuthSwitchMode(!this.props.isSignUp) }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            },\n        }\n        this.setState({ controls: updatedControls, errorMessage: null })\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault()\n        this.props.onAuth(this.state.controls.userName.value, this.state.controls.password.value, this.props.isSignUp)\n    }\n\n    render() {\n        const formElementsArr = [];\n        for (let key in this.state.controls) {\n            formElementsArr.push({\n                id: key,\n                config: this.state.controls[key]\n            })\n        }\n\n        const form = formElementsArr.map(formElement => {\n            let errorMessage = null\n            if (!formElement.config.valid && formElement.config.touched && formElement.id === 'userName') {\n                errorMessage = 'Username must be at least 4 characters long and contain only letters and numbers '\n            }\n            if (!formElement.config.valid && formElement.config.touched && formElement.id === 'password') {\n                errorMessage = 'Password must be at least 6 characters long'\n            }\n\n            return (\n                <Fragment key={formElement.id}>\n                    <Input\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}\n                        shouldValidate={formElement.config.validation}\n                        invalid={!formElement.config.valid}\n                    />\n                    <p className='auth__error-message'>{errorMessage === 'Email Exist' ? 'Username exist' : errorMessage}</p>\n                </Fragment>\n            )\n        })\n\n\n        return (\n            <div>\n                <h4 className='auth__welcome'>{this.props.isSignUp ? 'Welcome to our app!' : 'Welcome back!'}</h4>\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <p className='auth__error-message auth__error-message--capitalize'>{this.state.errorMessage}</p>\n                    <AuthBtn type='with-background-wide' disabled={this.state.controls.userName.valid && this.state.controls.password.valid ? false : true}>Submit</AuthBtn>\n                </form>\n                <p className='toSignIn'>{this.props.isSignUp ? 'Already have an account?' : `Don't have an account?`}</p>\n                <AuthBtn type='text-btn' click={this.switchAuthModeHandler}>{this.props.isSignUp ? 'Sign in' : 'Sign up'}</AuthBtn>\n            </div >\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isSignUp: state.auth.isSignUp,\n        errorMessage: state.auth.error,\n        token: state.auth.token\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (userName, password, isSignUp) => dispatch(actions.auth(userName, password, isSignUp)),\n        onAuthSwitchMode: (isSignUp) => dispatch(actions.switchAuthMode(isSignUp)).errorMessage\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth)","import React from 'react'\nimport './Spinner.scss'\n\nconst spinner = () => (\n    <div className=\"loader\">Loading...</div>\n)\n\n\nexport default spinner","import React, { Component } from 'react'\nimport './Main.scss'\nimport { connect } from 'react-redux'\nimport Logo from '../../components/Logo/Logo'\nimport AuthBtns from '../../components/Buttons/AuthBtns/AuthBtns'\nimport Modal from '../../sharedComponent/Modal/Modal'\nimport Auth from '../Auth/Auth'\nimport * as actions from '../../store/actions/index'\nimport Spinner from '../../sharedComponent/Spinner/Spinner'\n\n\n\nclass Main extends Component {\n    render() {\n        if (this.props.token) {\n            this.props.history.push('/to-do-list')\n        }\n        let form = null\n\n        if (this.props.isFormShown) {\n            form = (\n                <Modal show={this.props.isFormShown} backDropClick={this.props.onBackdropClick}>\n                    {this.props.loading ? <Spinner /> : <Auth isSignUp={this.props.isSignUp} />}\n                </Modal>\n            )\n        }\n        return (\n            <div className='Main'>\n                {form}\n                <div className='Main__header'>\n                    <Logo />\n                </div>\n                <h1 className='Main__heading'>All your tasks <br /> managed in one place</h1>\n                <p className='Main__sub-heading'>My To-Do List is a useful tool for everyone, <br /> who wants to keep their everyday routine under control.</p>\n                <AuthBtns click={this.props.onAuthBtnClick} />\n                <div className=\"Main__illustration-container\" />\n            </div >\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isSignUp: state.auth.isSignUp,\n        isFormShown: state.auth.isFormShown,\n        loading: state.auth.loading,\n        token: state.auth.token\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuthBtnClick: (isSignUp, isFormShown) => dispatch(actions.authBtnClick(isSignUp, isFormShown)),\n        onBackdropClick: () => dispatch(actions.closeForm())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main)","import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../../store/actions/index'\n\nclass Logout extends Component {\n    componentDidMount() {\n        this.props.onLogout()\n    }\n    render() {\n        return <Redirect to='/' />\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onLogout: () => dispatch(actions.logout())\n    }\n}\nexport default connect(null, mapDispatchToProps)(Logout)","import React, { Component } from 'react';\nimport { Route, Switch, withRouter, Redirect } from 'react-router-dom'\nimport './App.css';\nimport ToDoList from './containers/ToDoList/ToDoList'\nimport Main from './containers/Main/Main'\nimport Logout from './containers/Auth/Logout/Logout'\nimport { connect } from 'react-redux'\nimport * as actions from './store/actions/index'\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onTryAutoSignUp()\n  }\n\n  render() {\n\n    let routes = (<Switch>\n      <Route path='/' component={Main} />\n      {this.props.isAuth ? <Redirect from='/' to='/to-do-list' /> : <Redirect to='/' />}\n    </Switch>\n    )\n\n\n\n    if (this.props.isAuth) {\n      routes = (\n        <Switch>\n          <Route path='/to-do-list' component={ToDoList} />\n          <Route path='/logout' component={Logout} />\n          <Redirect to='/to-do-list' />\n        </Switch>\n      )\n    }\n\n    return (\n      <div className=\"App\" >\n        {routes}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    isAuth: state.auth.token !== null\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTryAutoSignUp: () => dispatch(actions.authCheckState())\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const updateObj = (oldObj, updatedProps) => {\n    return {\n        ...oldObj,\n        ...updatedProps\n    }\n}","import * as actionTypes from '../actions/actionTypes'\nimport { updateObj } from '../utility'\n\nconst initialState = {\n    isSignUp: false,\n    isFormShown: false,\n    loading: false,\n\n    token: null,\n    userId: null,\n    error: null\n}\n\nconst authStart = (state) => {\n    return updateObj(state, {\n        error: null,\n        loading: true\n    })\n}\n\nconst authSuccess = (state, action) => {\n    return updateObj(state, {\n        token: action.idToken,\n        userId: action.userId,\n        error: null,\n        loading: false,\n        isFormShown: false\n    })\n}\n\nconst authFail = (state, action) => {\n    return updateObj(state, {\n        error: action.error,\n        loading: false\n    })\n}\n\nconst switchAuthMode = (state, action) => {\n    return updateObj(state, { isSignUp: action.isSignUp })\n}\n\nconst authLogout = (state, action) => {\n    return updateObj(state, {\n        token: null,\n        userId: null,\n        error: null\n    })\n}\n\nconst authBtnClick = (state, action) => {\n    return updateObj(state, {\n        isSignUp: action.isSignUp,\n        isFormShown: action.isFormShown\n    })\n}\n\nconst closeForm = (state, action) => {\n    return updateObj(state, {\n        isFormShown: action.isFormShown,\n        error: action.error\n    })\n}\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.AUTH_START: return authStart(state)\n        case actionTypes.AUTH_SUCCESS: return authSuccess(state, action)\n        case actionTypes.AUTH_FAIL: return authFail(state, action)\n        case actionTypes.SWITCH_AUTH_MODE: return switchAuthMode(state, action)\n        case actionTypes.AUTH_LOGOUT: return authLogout(state, action)\n        case actionTypes.AUTH_BTN_CLICK: return authBtnClick(state, action)\n        case actionTypes.CLOSE_FORM: return closeForm(state, action)\n        default: return state\n\n    }\n}\n\nexport default reducer","import * as actionTypes from '../actions/actionTypes'\nimport { updateObj } from '../utility'\n\nconst initialState = {\n    tasks: [],\n    error: null,\n    data: null\n}\n\n//FETCH\nconst fetchTasksSuccess = (state, action) => {\n    return updateObj(state, { tasks: action.tasks, error: null, loading: false })\n}\n\nconst fetchTasksFail = (state, action) => {\n    return updateObj(state, { error: action.error, loading: false })\n}\n\n\n//POST\nconst postTasksFail = (state, action) => {\n    return updateObj(state, { error: action.error })\n}\n\nconst postTasksSuccess = (state, action) => {\n    let updatedTasks = [...state.tasks]\n    updatedTasks.push({\n        ...action.task\n    })\n    return updateObj(state, { tasks: updatedTasks, error: null })\n}\n\n//PUT\nconst putTaskSuccess = (state, action) => {\n    const updatedTasks = [...state.tasks]\n    updatedTasks.forEach(cur => {\n        if (cur.id === action.id) {\n            cur.description = action.description\n        }\n    })\n\n    return updateObj(state, { tasks: updatedTasks })\n}\n\nconst putTaskFail = (state, action) => {\n    return updateObj(state, { error: action.error })\n}\n\n\n//DELETE\nconst deleteOrFinishTaskSuccess = (state, action) => {\n    const updatedTasks = state.tasks.filter((cur => cur.id !== action.id))\n    return updateObj(state, { tasks: updatedTasks })\n}\n\nconst deleteOrFinishTaskFail = (state, action) => {\n    return updateObj(state, { error: action.error })\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.FETCH_TASKS_SUCCESS: return fetchTasksSuccess(state, action)\n        case actionTypes.FETCH_TASKS_FAIL: return fetchTasksFail(state, action)\n\n        case actionTypes.POST_TASKS_SUCCESS: return postTasksSuccess(state, action)\n        case actionTypes.POST_TASKS_FAIL: return postTasksFail(state, action)\n\n        case actionTypes.PUT_TASK_SUCCESS: return putTaskSuccess(state, action)\n        case actionTypes.PUT_TASK_FAIL: return putTaskFail(state, action)\n\n        case actionTypes.DELETE_OR_FINISH_TASK_SUCCESS: return deleteOrFinishTaskSuccess(state, action)\n        case actionTypes.DELETE_OR_FINISH_TASK_FAIL: return deleteOrFinishTaskFail(state, action)\n        default: return state\n    }\n\n}\n\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux'\nimport thunk from 'redux-thunk'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport authReducer from './store/reducers/auth'\nimport todoReducer from './store/reducers/to-do-list'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({\n  todo: todoReducer,\n  auth: authReducer\n})\n\nconst store = createStore(rootReducer, composeEnhancers(\n  applyMiddleware(thunk)\n))\n\nconst app = (\n  <Provider store={store}>\n    <BrowserRouter basename='/my-to-do-list-react'>\n      <App />\n    </BrowserRouter>\n  </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}