{"version":3,"sources":["assets/illustration.svg","store/actions/auth.js","store/actions/actionTypes.js","store/actions/toDoList.js","helpers/helpers.js","sharedComponents/Line/Line.js","components/Logo/Logo.js","components/Buttons/AuthBtns/AuthBtn/AuthBtn.js","components/Header/Header.js","components/Buttons/TaskButtons/addNewTaskButton.js","components/Buttons/TaskButtons/DoneExitBtns.js","components/Buttons/TaskButtons/EditBtnInput.js","components/Tasks/Task.js","components/Tasks/Tasks.js","components/AddTask/AddTask.js","sharedComponents/Modal/Modal.js","components/ErrorMessage/ErrorMessage.js","containers/ToDoList/ToDoList.js","components/Buttons/AuthBtns/AuthBtns.js","components/Input/Input.js","containers/Auth/Auth.js","sharedComponents/Spinner/Spinner.js","containers/Main/Main.js","containers/Auth/Logout/Logout.js","App.js","serviceWorker.js","store/utility.js","store/reducers/auth.js","store/reducers/toDoList.js","index.js"],"names":["module","exports","authSuccess","token","userId","type","idToken","logout","localStorage","removeItem","authCheckState","dispatch","expirationTime","getItem","expirationDate","Date","getTime","setTimeout","baseUrl","postTaskSuccess","task","postTaskFail","error","key","putTaskFail","makeid","length","result","characters","charactersLength","i","charAt","Math","floor","random","formatTime","time","Line","className","Logo","AuthBtn","children","click","disabled","onClick","now","day","getDate","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","getCurrentTime","connect","onLogout","actions","to","AddTaskBtn","DoneExitBtns","update","cancel","InputAndBtns","value","spanHeight","change","closeTextArea","textAreaRef","useRef","useEffect","nextHeight","min","textAreaPaddingTop","parseFloat","window","getComputedStyle","current","getPropertyValue","style","height","rows","scrollHeight","spanHeightWithOneLine","autoFocus","ref","onChange","onKeyDown","event","keyCode","preventDefault","target","state","auth","onFinishOrDeleteTask","taskId","a","queryParams","id","axios","delete","errorMessage","message","toLowerCase","split","join","onPutTaskUpdate","console","log","put","description","data","useState","isEdit","setIsEdit","setSpanHeight","initialValue","setNewValue","spanRef","documentClickHandler","classList","includes","closeEditTextArea","offsetHeight","document","addEventListener","removeEventListener","finishOrDeleteTask","EditBtnInput","name","version","xmlns","xmlnsXlink","x","y","viewBox","enableBackground","xmlSpace","points","strokeLinecap","onAnimationStart","Tasks","tasks","TransitionGroup","map","el","CSSTransition","timeout","classNames","unmountOnExit","AddTask","cancelClick","onAdd","placeholder","Modal","show","backDropClick","ErrorMessage","ToDoList","isShownAddTaskInput","addInputValue","addNewTaskBtnHandler","setState","cancelAddingTaskHandler","addInputChangeHandler","addTaskBtnHandler","newTask","props","postTask","this","onFetchTasks","onBackdropClick","src","illustration","alt","Component","todo","post","res","realId","get","fetchedTasks","push","AuthBtns","Input","elementConfig","invalid","shouldValidate","touched","changed","label","inputClasses","inputElement","autoComplete","Auth","controls","userName","valid","validation","required","onlyLettersAndNumbers","minLength","password","switchAuthModeHandler","onAuthSwitchMode","isSignUp","inputChangedHandler","controlName","updatedControls","checkValidity","submitHandler","onAuth","rules","isValid","trim","test","formElementsArr","config","form","formElement","onSubmit","username","authData","email","returnSecureToken","url","expiresIn","setItem","localId","response","replace","spinner","Main","history","isFormShown","loading","onAuthBtnClick","Logout","App","onTryAutoSignUp","routes","path","exact","component","isAuth","withRouter","Boolean","location","hostname","match","updateObj","oldObj","updatedProps","initialState","authStart","action","authFail","switchAuthMode","authLogout","authBtnClick","reducer","fetchTasksSuccess","fetchTasksFail","updateId","updatedTasks","forEach","cur","filter","putTaskSuccess","deleteOrFinishTaskSuccess","deleteOrFinishTaskFail","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","todoReducer","authReducer","store","createStore","applyMiddleware","thunk","app","basename","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0b416983.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/illustration.bfcc6550.svg\";","import * as actionTypes from './actionTypes'\nimport axios from 'axios'\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START\n    }\n}\n\nexport const authSuccess = (token, userId) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        idToken: token,\n        userId: userId\n\n    }\n}\n\nexport const authBtnClick = (isSignUp, isFormShown) => {\n    return {\n        type: actionTypes.AUTH_BTN_CLICK,\n        isSignUp,\n        isFormShown\n    }\n}\n\nexport const authFail = (error) => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error\n\n    }\n}\n\nexport const backDropClick = () => {\n    return {\n        type: actionTypes.BACKDROP_CLICK,\n    }\n}\n\nexport const switchAuthMode = (isSignUp) => {\n    return {\n        type: actionTypes.SWITCH_AUTH_MODE,\n        isSignUp\n    }\n}\n\nexport const checkAuthTimeOut = (expirationTime) => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout())\n        }, expirationTime * 1000)\n    }\n\n}\n\nexport const logout = () => {\n    localStorage.removeItem('token')\n    localStorage.removeItem('expirationDate')\n    localStorage.removeItem('userId')\n    return {\n        type: actionTypes.AUTH_LOGOUT\n    }\n}\n\n\nexport const auth = (username, password, isSignUp) => {\n    return async dispatch => {\n        try {\n            dispatch(authStart())\n            const authData = {\n                username: username,\n                email: `${username}@todo.list`,\n                password: password,\n                returnSecureToken: true\n            }\n            const baseUrl = 'https://identitytoolkit.googleapis.com/v1/accounts:'\n            let url = `${baseUrl}signUp?key=AIzaSyBTkC5sKi6tMveqTPRvodHeA42E495rGng`\n\n            if (!isSignUp) {\n                url = `${baseUrl}signInWithPassword?key=AIzaSyBTkC5sKi6tMveqTPRvodHeA42E495rGng`\n            }\n\n            const res = await axios.post(url, authData)\n            const expirationDate = new Date(new Date().getTime() + res.data.expiresIn * 1000)\n            localStorage.setItem('token', res.data.idToken)\n            localStorage.setItem('expirationDate', expirationDate)\n            localStorage.setItem('userId', res.data.localId)\n            dispatch(authSuccess(res.data.idToken, res.data.localId))\n\n        } catch (error) {\n            const errorMessage = error.response.data.error.message.toLowerCase().split('_').join(' ').replace(/email/i, 'username')\n            dispatch(authFail(errorMessage))\n        }\n    }\n}\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token')\n        if (!token) {\n            dispatch(logout())\n        } else {\n            const expirationDate = new Date(localStorage.getItem('expirationDate'))\n            if (expirationDate <= new Date()) {\n                dispatch(logout())\n            } else {\n                const userId = localStorage.getItem('userId')\n                dispatch(authSuccess(token, userId))\n                dispatch(checkAuthTimeOut((expirationDate.getTime() - new Date().getTime()) / 1000))\n            }\n        }\n    }\n}","//AUTH ACTIONS\nexport const SWITCH_AUTH_MODE = 'SWITCH_AUTH_MODE'\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT'\n\nexport const AUTH_START = 'AUTH_START'\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS'\nexport const AUTH_FAIL = 'AUTH_FAIL'\n\nexport const AUTH_BTN_CLICK = 'AUTH_BTN_CLICK'\nexport const BACKDROP_CLICK = 'CLOSE_FORM'\n\n//TO-DO-LIST ACTIONS\nexport const UPDATE_ID_SUCCESS = 'UPDATE_ID_SUCCESS'\nexport const POST_TASK_SUCCESS = 'POST_TASK_SUCCESS'\nexport const POST_TASK_FAIL = 'POST_TASK_FAIL'\n\nexport const PUT_TASK_SUCCESS = 'PUT_TASK_SUCCESS'\nexport const PUT_TASK_FAIL = 'PUT_TASK_FAIL'\n\nexport const DELETE_OR_FINISH_TASK_FAIL = 'DELETE_OR_FINISH_TASK_FAIL'\nexport const DELETE_OR_FINISH_TASK_SUCCESS = 'DELETE_OR_FINISH_TASK_SUCCESS'\n\nexport const FETCH_TASKS_START = 'FETCH_TASKS_START'\nexport const FETCH_TASKS_SUCCESS = 'FETCH_TASKS_SUCCESS'\nexport const FETCH_TASKS_FAIL = 'FETCH_TASKS_FAIL'\n\n\n","import * as actionTypes from './actionTypes'\nimport axios from 'axios'\n\nconst baseUrl = 'https://my-to-do-list-on-react.firebaseio.com/tasks/'\n\n//FETCH\nexport const fetchTasksSuccess = (tasks) => {\n    return {\n        type: actionTypes.FETCH_TASKS_SUCCESS,\n        tasks\n    }\n}\n\nexport const fetchTasksFail = (error) => {\n    return {\n        type: actionTypes.FETCH_TASKS_FAIL,\n        error\n    }\n}\n\nexport const fetchTasks = (token, userId) => {\n    return async dispatch => {\n        try {\n            const queryParams = '?auth=' + token\n            const res = await axios.get(`${baseUrl}${userId}.json${queryParams}`)\n            const fetchedTasks = []\n            for (let key in res.data) {\n                fetchedTasks.push({\n                    ...res.data[key],\n                    id: key\n                })\n            }\n            dispatch(fetchTasksSuccess(fetchedTasks ? fetchedTasks : []))\n        } catch (error) {\n            dispatch(fetchTasksFail(error.message))\n        }\n    }\n}\n\n//POST\nexport const postTaskSuccess = (task) => {\n    return {\n        type: actionTypes.POST_TASK_SUCCESS,\n        task\n    }\n}\n\nexport const updateTaskWithRealId = (key, realId) => {\n    return {\n        type: actionTypes.UPDATE_ID_SUCCESS,\n        key,\n        realId\n    }\n}\n\nexport const postTaskFail = (error, key) => {\n    return {\n        type: actionTypes.POST_TASK_FAIL,\n        error,\n        key\n    }\n}\n\nexport const postTask = (token, task) => {\n    return async dispatch => {\n        try {\n            dispatch(postTaskSuccess({ ...task, id: null }))\n            const res = await axios.post(`${baseUrl}${task.userId}.json?auth=${token}`, { ...task })\n            const id = res.data.name\n            dispatch(updateTaskWithRealId(task.key, id))\n        } catch (error) {\n            dispatch(postTaskFail(error.message, task.key))\n        }\n    }\n}\n\n//PUT\nexport const putTaskSuccess = (description, id) => {\n    return {\n        type: actionTypes.PUT_TASK_SUCCESS,\n        description,\n        id\n    }\n}\n\nexport const putTaskFail = (error) => {\n    return {\n        type: actionTypes.PUT_TASK_FAIL,\n        error\n    }\n}\n\nexport const putTask = (token, task, taskId, userId) => {\n    console.log(taskId)\n    return async dispatch => {\n        try {\n            const queryParams = '?auth=' + token\n            axios.put(`${baseUrl}${userId}/${taskId}.json${queryParams}`, { ...task, description: task.description })\n            dispatch(putTaskSuccess(task.description, taskId))\n        } catch (error) {\n            dispatch(putTaskFail(error.message))\n        }\n    }\n}\n\n//DELETE\nexport const deleteOrFinishTaskSuccess = (id) => {\n    return {\n        type: actionTypes.DELETE_OR_FINISH_TASK_SUCCESS,\n        id\n    }\n}\n\nexport const deleteOrFinishTaskFail = (error) => {\n    return {\n        type: actionTypes.DELETE_OR_FINISH_TASK_FAIL,\n        error\n    }\n}\n\nexport const deleteTask = (token, taskId, userId) => {\n    return async dispatch => {\n        try {\n            const queryParams = '?auth=' + token\n            dispatch(deleteOrFinishTaskSuccess(taskId))\n            await axios.delete(`${baseUrl}${userId}/${taskId}.json${queryParams}`)\n        } catch (error) {\n            const errorMessage = error.message.toLowerCase().split('_').join(' ')\n            dispatch(deleteOrFinishTaskFail(errorMessage))\n\n        }\n    }\n}","//Generate Random String (creating a unique ID)\nexport function makeid(length = 5) {\n    let result = ''\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n    const charactersLength = characters.length\n    for (let i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength))\n    }\n    return result\n}\n\n\nexport function getCurrentTime() {\n\n    const now = new Date()\n    const day = now.getDate()\n\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    const curMonth = now.getMonth()\n    const month = months[curMonth]\n    const year = now.getFullYear()\n    let hours = now.getHours()\n    hours = formatTime(hours)\n    let minutes = now.getMinutes()\n    minutes = formatTime(minutes)\n\n    return { day, month, year, hours, minutes }\n}\n\nfunction formatTime(time) {\n    return time < 10 ? `0${time}` : time\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Line.scss'\nconst Line = ({ className = '' }) => {\n    return (\n        <div className={`line ${className}`}></div>\n    )\n}\n\nLine.propTypes = {\n    className: PropTypes.string\n}\n\nexport default Line ","import React from 'react'\nimport './Logo.scss'\n\nconst Logo = () => (\n    <div>\n        <h1 className=\"logo\">My To-Do List</h1>\n        <span className=\"logo__author\">By Anna Sviatelyk</span>\n    </div>\n)\n\nexport default Logo","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './AuthBtn.scss'\n\n\nconst AuthBtn = ({ children, type, click, disabled }) => {\n    let className = null\n    if (type === 'full') { className = 'authBtn' }\n    if (type === 'border') { className = 'authBtn authBtn--with-border' }\n    if (type === 'secondary') { className = 'authBtn authBtn--text' }\n    if (type === 'block') { className = 'authBtn authBtn--wide' }\n\n    return (\n        <button className={className} onClick={click} disabled={disabled}>{children}</button>\n    )\n\n}\n\nAuthBtn.propTypes = {\n    type: PropTypes.oneOf(['full', 'border', 'secondary', 'block']),\n    click: PropTypes.func,\n    disabled: PropTypes.bool\n}\n\nexport default AuthBtn","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions/index'\nimport './Header.scss'\nimport { getCurrentTime } from '../../helpers/helpers'\nimport Line from '../../sharedComponents/Line/Line'\nimport Logo from '../Logo/Logo'\nimport { NavLink } from 'react-router-dom'\nimport AuthBtn from '../Buttons/AuthBtns/AuthBtn/AuthBtn'\n\n\nconst { day, month, year, hours, minutes } = getCurrentTime();\n\nconst Header = ({ onLogout }) => {\n    return (\n        <>\n            <header className=\"header\">\n                <Logo />\n                <div className=\"header__date-and-time\">\n                    <span className=\"header__data-label\">Today</span>\n                    <span className=\"header__data header__data--date\">{month} {day}, {year}</span>\n                    <span className=\"header__data-label\">Time</span>\n                    <span className=\"header__data header__data--time\">{hours}:{minutes}</span>\n                </div>\n                <NavLink to={'/logout'}><AuthBtn type='full' onClick={onLogout}>Logout</AuthBtn></NavLink>\n            </header>\n            <Line />\n        </>\n    )\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onLogout: () => dispatch(actions.logout())\n    }\n}\n\nHeader.propTypes = {\n    onLogout: PropTypes.func\n}\n\nexport default connect(null, mapDispatchToProps)(Header)","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './addNewTaskButton.scss'\n\nconst AddTaskBtn = ({ click, children }) => {\n    return (\n        <div className=\"new-item\" onClick={click}>\n            <i className=\"new-item__plus-icon\"></i>\n            <span className=\"new-item__label\">{children}</span>\n        </div>\n    )\n}\n\nAddTaskBtn.propTypes = {\n    click: PropTypes.func\n}\nexport default AddTaskBtn","import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../../Tasks/Task.scss'\n\n\nconst DoneExitBtns = ({ update, cancel }) => {\n    return (\n        <div className=\"task__btns\">\n            <i className=\"task__btn-done\" onClick={update}></i>\n            <i className=\"task__btn-exit-edit\" onClick={cancel}></i>\n        </div>\n    )\n\n}\n\nDoneExitBtns.propTypes = {\n    update: PropTypes.func,\n    cancel: PropTypes.func\n}\n\nexport default DoneExitBtns","import React, { useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport '../../Tasks/Task.scss'\n\nconst maxTextAreaHeight = 100\nconst spanHeightWithOneLine = 37\n\nconst InputAndBtns = ({ value, spanHeight, change, closeTextArea }) => {\n    const textAreaRef = useRef(null)\n    let className = value ? '' : 'task__edit-input-text--invalid'\n\n    useEffect(() => {\n        let nextHeight = Math.min(maxTextAreaHeight, spanHeight)\n        const textAreaPaddingTop = parseFloat(window.getComputedStyle(textAreaRef.current, null).getPropertyValue('padding-top'))\n        textAreaRef.current.style.height = nextHeight + (2 * textAreaPaddingTop) + 'px'\n\n        if (value) {\n            textAreaRef.current.rows = 1\n            textAreaRef.current.style.height = 'auto'\n            nextHeight = Math.min(maxTextAreaHeight, textAreaRef.current.scrollHeight)\n            textAreaRef.current.style.height = nextHeight + 'px'\n        } else {\n            textAreaRef.current.style.height = spanHeightWithOneLine + 'px'\n        }\n\n    }, [value, spanHeight])\n\n    const keyPressHandler = (event) => {\n        if (event.keyCode === 13) {\n            event.preventDefault();\n            if (event.target.value.length > 0) {\n                closeTextArea()\n            }\n        }\n    }\n\n    return (\n        <textarea\n            className={`task__edit-input-text ${className}`}\n            type=\"text\"\n            autoFocus\n            ref={textAreaRef}\n            onChange={change}\n            onKeyDown={keyPressHandler}\n            value={value} />\n    )\n\n}\n\nInputAndBtns.propTypes = {\n    value: PropTypes.string,\n    spanHeight: PropTypes.number,\n    change: PropTypes.func,\n    closeTextArea: PropTypes.func\n}\n\nexport default InputAndBtns","import React, { useState, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport './Task.scss'\nimport Line from '../../sharedComponents/Line/Line'\nimport DoneExitBtns from '../Buttons/TaskButtons/DoneExitBtns'\nimport EditBtnInput from '../Buttons/TaskButtons/EditBtnInput'\nimport * as actions from '../../store/actions/index'\n\n\nconst Task = ({ data, onFinishOrDeleteTask, onPutTaskUpdate, token, userId }) => {\n    const [isEdit, setIsEdit] = useState(false)\n    const [spanHeight, setSpanHeight] = useState(37)\n    const [initialValue, setNewValue] = useState(data.description)\n    const spanRef = useRef(null)\n\n    const task = {\n        description: initialValue,\n        userId: userId\n    }\n\n    const documentClickHandler = (event) => {\n        const ignoringElements = ['task__edit-input-text', 'task__btn-done', 'task__btn-exit-edit']\n        const className = event.target.classList[0]\n        if (!ignoringElements.includes(className)) { closeEditTextArea() }\n    }\n\n    const openEditTextArea = () => { setIsEdit(true) }\n\n    useEffect(() => {\n        const spanHeight = spanRef.current.offsetHeight\n        setSpanHeight(spanHeight)\n    }, [])\n\n    useEffect(() => {\n        if (isEdit) {\n            document.addEventListener('click', documentClickHandler)\n        }\n        return () => document.removeEventListener('click', documentClickHandler)\n        // eslint-disable-next-line\n    }, [isEdit, initialValue])\n\n\n    const closeEditTextArea = () => {\n        if (initialValue.length > 0) {\n            setIsEdit(false)\n            onPutTaskUpdate(token, task, data.id, userId)\n        }\n    }\n\n    const updateValue = (event) => {\n        const value = event.target.value\n        setNewValue(value)\n    }\n\n    const cancelValueUpdate = () => {\n        setIsEdit(false)\n        setNewValue(data.description)\n    }\n\n    const finishOrDeleteTask = () => {\n        onFinishOrDeleteTask(token, data.id, userId)\n    }\n\n    return (\n        <div className=\"task\">\n            <div className=\"task__content-wrapper\">\n                <div className=\"task__description\">\n                    {isEdit ? <EditBtnInput change={updateValue} closeTextArea={closeEditTextArea} value={initialValue} spanHeight={spanHeight} /> : (\n                        <>\n                            <label className='task__checkbox' >\n                                <input type=\"checkbox\" name=\"check\" />\n                                <svg version=\"1.1\" className=\"task__checkbox_svg\" xmlns=\"http://www.w3.org/2000/svg\"\n                                    xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\"\n                                    style={{ enableBackground: \"new 0 0 100 100\" }} xmlSpace=\"preserve\">\n                                    <polyline className=\"task__checkbox_line\" points=\"3.5,45.5 40.5,82.5 95.7,15.3 \"\n                                        strokeLinecap=\"round\" onAnimationStart={finishOrDeleteTask} /></svg>\n                            </label>\n\n                            <span className=\"task__name\" ref={spanRef}>{initialValue}</span>\n                        </>\n                    )}\n                </div>\n                {isEdit ?\n                    <DoneExitBtns update={closeEditTextArea} cancel={cancelValueUpdate} />\n                    :\n                    (<div className=\"task__btns\">\n                        <i className=\"task__btn-edit\" onClick={openEditTextArea}></i>\n                        <i className=\"task__btn-delete\" onClick={finishOrDeleteTask}></i>\n                    </div>)\n                }\n            </div>\n            <Line className='line__in-task' />\n        </div >\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFinishOrDeleteTask: (token, taskId, userId) => dispatch(actions.deleteTask(token, taskId, userId)),\n        onPutTaskUpdate: (token, task, taskId, userId) => dispatch(actions.putTask(token, task, taskId, userId))\n    }\n}\n\n\nTask.propTypes = {\n    data: PropTypes.object,\n    onFinishOrDeleteTask: PropTypes.func,\n    onPutTaskUpdate: PropTypes.func,\n    token: PropTypes.string,\n    userId: PropTypes.string,\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Task)","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Tasks.scss'\nimport Task from './Task'\nimport {\n    CSSTransition,\n    TransitionGroup,\n} from 'react-transition-group';\n\n\n\nconst Tasks = ({ tasks }) => {\n    return (\n        <TransitionGroup className=\"tasks-container\">\n            {\n                tasks.map(el => {\n                    return (\n                        <CSSTransition\n                            key={el.key}\n                            timeout={300}\n                            classNames=\"task\"\n                            unmountOnExit\n                        >\n                            <Task data={el} />\n                        </CSSTransition>\n                    )\n                })\n            }\n\n        </TransitionGroup>\n    )\n}\n\nTasks.propTypes = {\n    tasks: PropTypes.array\n}\n\nexport default Tasks","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './AddTask.scss'\n\n\nconst AddTask = ({ value, cancelClick, onChange, onAdd }) => {\n    const keyPressHandler = (event) => {\n        if (event.keyCode === 13) {\n            event.preventDefault();\n            if (event.target.value !== '') {\n                onAdd(value.length)\n            }\n        }\n    }\n\n    return (\n        <div className=\"add-new-item\">\n            <div className=\"add-new-item__description-field\">\n                <input\n                    type=\"text\"\n                    className=\"add-new-item__description\"\n                    placeholder=\"E.g. Start working on new project...\"\n                    onChange={onChange}\n                    onKeyDown={keyPressHandler}\n                />\n            </div>\n\n            <div className=\"add-new-item__buttons\">\n                <button className={`add-new-item__btn-add-task ${value.length ? '' : ' add-new-item__btn-add-task--disabled'}`} onClick={() => onAdd(value.length)}> Add task</button>\n                <button className=\"add-new-item__btn-cancel\" onClick={cancelClick}>Cancel</button>\n            </div>\n        </div>\n    )\n}\n\nAddTask.propTypes = {\n    value: PropTypes.string,\n    cancelClick: PropTypes.func,\n    onChange: PropTypes.func,\n    onAdd: PropTypes.func\n}\nexport default AddTask","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Modal.scss'\n\nconst Modal = ({ show, backDropClick, children }) => {\n    if (!show) {\n        return null\n    }\n\n    return (\n        <div className=\"Modal\">\n            <div className='Modal__backdrop' onClick={backDropClick} />\n            <div className='Modal__body'>\n                {children}\n            </div>\n        </div>\n    )\n}\n\nModal.propTypes = {\n    show: PropTypes.bool,\n    backDropClick: PropTypes.func\n}\n\nexport default Modal","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './ErrorMessage.scss'\nimport AuthBtn from '../Buttons/AuthBtns/AuthBtn/AuthBtn'\n\nconst ErrorMessage = ({ errorMessage, click }) => (\n    <div className='error'>\n        <span className='error__label'>Error!</span>\n        <p className='error__message'>{errorMessage}</p>\n        <AuthBtn type='full' click={click}>Ok</AuthBtn>\n    </div>\n\n)\n\nErrorMessage.propTypes = {\n    errorMessage: PropTypes.string,\n    click: PropTypes.func\n}\n\nexport default ErrorMessage","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport './ToDoList.scss';\nimport Header from '../../components/Header/Header'\nimport illustration from '../../assets/illustration.svg'\nimport AddTaskBtn from '../../components/Buttons/TaskButtons/addNewTaskButton'\nimport Tasks from '../../components/Tasks/Tasks'\nimport AddTask from '../../components/AddTask/AddTask'\nimport * as actions from '../../store/actions/index'\nimport Modal from '../../sharedComponents/Modal/Modal';\nimport ErrorMessage from '../../components/ErrorMessage/ErrorMessage'\nimport { makeid } from '../../helpers/helpers'\n\n\nclass ToDoList extends Component {\n    state = {\n        isShownAddTaskInput: false,\n        addInputValue: '',\n    }\n\n    componentDidMount() {\n        this.props.onFetchTasks(this.props.token, this.props.userId)\n    }\n\n\n    addNewTaskBtnHandler = () => { this.setState({ isShownAddTaskInput: true }) }\n\n    cancelAddingTaskHandler = () => {\n        this.setState({\n            isShownAddTaskInput: false,\n            addInputValue: ''\n        })\n    }\n\n    addInputChangeHandler = (event) => {\n        this.setState({\n            addInputValue: event.target.value\n        })\n    }\n\n    addTaskBtnHandler = (length) => {\n        if (length > 0) {\n            const newTask = {\n                description: this.state.addInputValue,\n                userId: this.props.userId,\n                key: makeid()\n            }\n\n            this.props.postTask(this.props.token, newTask)\n            this.setState({\n                isShownAddTaskInput: false,\n                addInputValue: ''\n            })\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Modal\n                    show={this.props.error}\n                    backDropClick={this.props.onBackdropClick}>\n                    <ErrorMessage errorMessage={this.props.error} click={this.props.onBackdropClick} />\n                </Modal>\n                <Header />\n                <img src={illustration} alt=\"time management illustration\" className=\"illustration\" />\n                <Tasks tasks={this.props.tasks} />\n                {this.state.isShownAddTaskInput ?\n                    <AddTask\n                        cancelClick={this.cancelAddingTaskHandler}\n                        value={this.state.addInputValue}\n                        onChange={this.addInputChangeHandler}\n                        onAdd={this.addTaskBtnHandler}\n                    /> : <AddTaskBtn click={this.addNewTaskBtnHandler}>Add new task</AddTaskBtn>}\n\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        tasks: state.todo.tasks,\n        token: state.auth.token,\n        userId: state.auth.userId,\n        error: state.todo.error\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        postTask: (token, task) => dispatch(actions.postTask(token, task)),\n        onFetchTasks: (token, userId) => dispatch(actions.fetchTasks(token, userId)),\n        onBackdropClick: () => dispatch(actions.backDropClick())\n    }\n\n}\n\nToDoList.propTypes = {\n    tasks: PropTypes.array,\n    token: PropTypes.string,\n    userId: PropTypes.string,\n    error: PropTypes.string,\n    postTask: PropTypes.func,\n    onFetchTasks: PropTypes.func,\n    onBackdropClick: PropTypes.func,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ToDoList)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport AuthBtn from './AuthBtn/AuthBtn'\n\nconst AuthBtns = ({ click }) => (\n    <div className='authBtns-container'>\n        <AuthBtn type='border' click={() => click(false, true)}>Login</AuthBtn>\n        <AuthBtn type='full' click={() => click(true, true)}>Register</AuthBtn>\n    </div>\n)\n\nAuthBtns.propTypes = {\n    click: PropTypes.func\n}\nexport default AuthBtns","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Input.scss'\n\nconst Input = ({ elementConfig, invalid, shouldValidate, touched, value, changed, label }) => {\n    const inputClasses = ['input']\n\n    if (invalid && shouldValidate && touched) {\n        inputClasses.push('input--invalid')\n    }\n\n    let inputElement = <input\n        autoComplete=\"off\"\n        className={inputClasses.join(' ')}\n        {...elementConfig}\n        value={value}\n        onChange={changed}\n    />\n\n    return (\n        <div className='Input'>\n            <label className='Label'>{label}</label>\n            {inputElement}\n            {/* {validationError} */}\n        </div>\n    )\n}\n\nInput.propTypes = {\n    elementConfig: PropTypes.object,\n    invalid: PropTypes.bool,\n    shouldValidate: PropTypes.object,\n    touched: PropTypes.bool,\n    value: PropTypes.string,\n    changed: PropTypes.func,\n    label: PropTypes.string\n}\n\nexport default Input","import React, { Component, Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions/index'\nimport './Auth.scss'\nimport Input from '../../components/Input/Input'\nimport AuthBtn from '../../components/Buttons/AuthBtns/AuthBtn/AuthBtn'\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            userName: {\n                elementConfig: {\n                    type: 'input',\n                    placeholder: \"Username\"\n                },\n                value: '',\n                touched: false,\n                valid: false,\n                validation: {\n                    required: true,\n                    onlyLettersAndNumbers: true,\n                    minLength: 4\n                }\n            },\n\n            password: {\n                elementConfig: {\n                    type: 'password',\n                    placeholder: \"Password\"\n                },\n                value: '',\n                touched: false,\n                valid: false,\n                validation: {\n                    required: true,\n                    minLength: 6\n                }\n            },\n        },\n        errorMessage: this.props.errorMessage\n    }\n\n    checkValidity(value, rules) {\n        let isValid = true;\n\n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.onlyLettersAndNumbers) {\n            const pattern = /^[0-9a-zA-Z]+$/\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n        return isValid;\n    }\n\n    switchAuthModeHandler = () => { this.props.onAuthSwitchMode(!this.props.isSignUp) }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            },\n        }\n        this.setState({ controls: updatedControls, errorMessage: null })\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault()\n        this.props.onAuth(this.state.controls.userName.value, this.state.controls.password.value, this.props.isSignUp)\n    }\n\n    render() {\n        const formElementsArr = [];\n        for (let key in this.state.controls) {\n            formElementsArr.push({\n                id: key,\n                config: this.state.controls[key]\n            })\n        }\n\n        const form = formElementsArr.map(formElement => {\n            let errorMessage = null\n            if (!formElement.config.valid && formElement.config.touched && formElement.id === 'userName') {\n                errorMessage = 'Username must be at least 4 characters long and contain only letters and numbers '\n            }\n            if (!formElement.config.valid && formElement.config.touched && formElement.id === 'password') {\n                errorMessage = 'Password must be at least 6 characters long'\n            }\n\n            return (\n                <Fragment key={formElement.id}>\n                    <Input\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}\n                        shouldValidate={formElement.config.validation}\n                        invalid={!formElement.config.valid}\n                    />\n                    <p className='auth__error-message'>{errorMessage}</p>\n                </Fragment>\n            )\n        })\n\n\n        return (\n            <div>\n                <h4 className='auth__welcome'>{this.props.isSignUp ? 'Welcome to our app!' : 'Welcome back!'}</h4>\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <p className='auth__error-message auth__error-message--capitalize'>{this.state.errorMessage}</p>\n                    <AuthBtn type='block' disabled={this.state.controls.userName.valid && this.state.controls.password.valid ? false : true}>Submit</AuthBtn>\n                </form>\n                <p className='toSignIn'>{this.props.isSignUp ? 'Already have an account?' : `Don't have an account?`}</p>\n                <AuthBtn type='secondary' click={this.switchAuthModeHandler}>{this.props.isSignUp ? 'Sign in' : 'Sign up'}</AuthBtn>\n            </div >\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isSignUp: state.auth.isSignUp,\n        errorMessage: state.auth.error,\n        token: state.auth.token\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (userName, password, isSignUp) => dispatch(actions.auth(userName, password, isSignUp)),\n        onAuthSwitchMode: (isSignUp) => dispatch(actions.switchAuthMode(isSignUp)).errorMessage\n    }\n}\n\nAuth.propTypes = {\n    isSignUp: PropTypes.bool,\n    errorMessage: PropTypes.string,\n    token: PropTypes.string,\n    onAuth: PropTypes.func,\n    onAuthSwitchMode: PropTypes.func\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth)","import React from 'react'\nimport './Spinner.scss'\n\nconst spinner = () => (\n    <div className=\"loader\">Loading...</div>\n)\n\n\nexport default spinner","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport './Main.scss'\nimport { connect } from 'react-redux'\nimport Logo from '../../components/Logo/Logo'\nimport AuthBtns from '../../components/Buttons/AuthBtns/AuthBtns'\nimport Modal from '../../sharedComponents/Modal/Modal'\nimport Auth from '../Auth/Auth'\nimport * as actions from '../../store/actions/index'\nimport Spinner from '../../sharedComponents/Spinner/Spinner'\n\n\n\nclass Main extends Component {\n    render() {\n        if (this.props.token) {\n            this.props.history.push('/to-do-list')\n        }\n        let form = null\n\n        if (this.props.isFormShown) {\n            form = (\n                <Modal show={this.props.isFormShown} backDropClick={this.props.onBackdropClick}>\n                    {this.props.loading ? <Spinner /> : <Auth isSignUp={this.props.isSignUp} />}\n                </Modal>\n            )\n        }\n        return (\n            <div className='Main'>\n                {form}\n                <div className='Main__header'>\n                    <Logo />\n                </div>\n                <h1 className='Main__heading'>All your tasks <br /> managed in one place</h1>\n                <p className='Main__sub-heading'>My To-Do List is a useful tool for everyone, <br /> who wants to keep their everyday routine under control.</p>\n                <AuthBtns click={this.props.onAuthBtnClick} />\n                <div className=\"Main__illustration-container\" />\n            </div >\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isSignUp: state.auth.isSignUp,\n        isFormShown: state.auth.isFormShown,\n        loading: state.auth.loading,\n        token: state.auth.token\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuthBtnClick: (isSignUp, isFormShown) => dispatch(actions.authBtnClick(isSignUp, isFormShown)),\n        onBackdropClick: () => dispatch(actions.backDropClick())\n    }\n}\n\n\nMain.propTypes = {\n    isSignUp: PropTypes.bool,\n    isFormShown: PropTypes.bool,\n    loading: PropTypes.bool,\n    token: PropTypes.string,\n    onAuthBtnClick: PropTypes.func,\n    onBackdropClick: PropTypes.func\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main)","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../../store/actions/index'\n\nclass Logout extends Component {\n    componentDidMount() {\n        this.props.onLogout()\n    }\n    render() {\n        return <Redirect to='/' />\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onLogout: () => dispatch(actions.logout())\n    }\n}\n\nLogout.propTypes = {\n    onLogout: PropTypes.func\n}\n\nexport default connect(null, mapDispatchToProps)(Logout)","import React, { Component } from 'react';\nimport { Route, Switch, withRouter, Redirect } from 'react-router-dom'\nimport './App.css';\nimport ToDoList from './containers/ToDoList/ToDoList'\nimport Main from './containers/Main/Main'\nimport Logout from './containers/Auth/Logout/Logout'\nimport { connect } from 'react-redux'\nimport * as actions from './store/actions/index'\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onTryAutoSignUp()\n  }\n\n  render() {\n\n    let routes = (<Switch>\n      <Route path='/' exact component={Main} />\n      <Redirect to='/' />\n    </Switch>\n    )\n\n    if (this.props.isAuth) {\n      routes = (\n        <Switch>\n          <Route path='/to-do-list' component={ToDoList} />\n          <Route path='/logout' component={Logout} />\n          <Redirect to='/to-do-list' />\n        </Switch>\n      )\n    }\n\n    return (\n      <div className=\"App\" >\n        {routes}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    isAuth: state.auth.token !== null\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTryAutoSignUp: () => dispatch(actions.authCheckState())\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const updateObj = (oldObj, updatedProps) => {\n    return {\n        ...oldObj,\n        ...updatedProps\n    }\n}","import * as actionTypes from '../actions/actionTypes'\nimport { updateObj } from '../utility'\n\nconst initialState = {\n    isSignUp: false,\n    isFormShown: false,\n    loading: false,\n\n    token: null,\n    userId: null,\n    error: null\n}\n\nconst authStart = (state) => {\n    return updateObj(state, {\n        error: null,\n        loading: true\n    })\n}\n\nconst authSuccess = (state, action) => {\n    return updateObj(state, {\n        token: action.idToken,\n        userId: action.userId,\n        error: null,\n        loading: false,\n        isFormShown: false\n    })\n}\n\nconst authFail = (state, action) => {\n    return updateObj(state, {\n        error: action.error,\n        loading: false\n    })\n}\n\nconst switchAuthMode = (state, action) => {\n    return updateObj(state, { isSignUp: action.isSignUp })\n}\n\nconst authLogout = (state, action) => {\n    return updateObj(state, {\n        token: null,\n        userId: null,\n        error: null\n    })\n}\n\nconst authBtnClick = (state, action) => {\n    return updateObj(state, {\n        isSignUp: action.isSignUp,\n        isFormShown: action.isFormShown\n    })\n}\n\nconst backDropClick = (state) => {\n    return updateObj(state, {\n        isFormShown: false,\n        error: null\n    })\n}\n\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.AUTH_START: return authStart(state)\n        case actionTypes.AUTH_SUCCESS: return authSuccess(state, action)\n        case actionTypes.AUTH_FAIL: return authFail(state, action)\n        case actionTypes.SWITCH_AUTH_MODE: return switchAuthMode(state, action)\n        case actionTypes.AUTH_LOGOUT: return authLogout(state, action)\n        case actionTypes.AUTH_BTN_CLICK: return authBtnClick(state, action)\n        case actionTypes.BACKDROP_CLICK: return backDropClick(state, action)\n        default: return state\n\n    }\n}\n\nexport default reducer","import * as actionTypes from '../actions/actionTypes'\nimport { updateObj } from '../utility'\n\nconst initialState = {\n    tasks: [],\n    error: null,\n    data: null\n}\n\n//FETCH\nconst fetchTasksSuccess = (state, action) => {\n    return updateObj(state, { tasks: action.tasks, error: null, loading: false })\n}\n\nconst fetchTasksFail = (state, action) => {\n    return updateObj(state, { error: action.error, loading: false })\n}\n\n\n//POST\nconst updateId = (state, action) => {\n    let updatedTasks = [...state.tasks]\n    updatedTasks.forEach(cur => {\n        if (cur.key === action.key) {\n            cur.id = action.realId\n        }\n    })\n    return updateObj(state, { tasks: updatedTasks })\n}\n\nconst postTaskFail = (state, action) => {\n    const updatedTasks = state.tasks.filter((cur => cur.key !== action.key))\n    return updateObj(state, { tasks: updatedTasks, error: action.error })\n}\n\nconst postTaskSuccess = (state, action) => {\n    let updatedTasks = [...state.tasks]\n    updatedTasks.push({\n        ...action.task\n    })\n    return updateObj(state, { tasks: updatedTasks, error: null })\n}\n\n//PUT\nconst putTaskSuccess = (state, action) => {\n    const updatedTasks = [...state.tasks]\n    updatedTasks.forEach(cur => {\n        if (cur.id === action.id) {\n            cur.description = action.description\n        }\n    })\n\n    return updateObj(state, { tasks: updatedTasks })\n}\n\nconst putTaskFail = (state, action) => {\n    return updateObj(state, { error: action.error })\n}\n\n\n//DELETE\nconst deleteOrFinishTaskSuccess = (state, action) => {\n    const updatedTasks = state.tasks.filter((cur => cur.id !== action.id))\n    return updateObj(state, { tasks: updatedTasks })\n}\n\nconst deleteOrFinishTaskFail = (state, action) => {\n    return updateObj(state, { error: action.error })\n}\n\n\nconst backDropClick = (state) => {\n    return updateObj(state, { error: null })\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.BACKDROP_CLICK: return backDropClick(state, action)\n        case actionTypes.FETCH_TASKS_SUCCESS: return fetchTasksSuccess(state, action)\n        case actionTypes.FETCH_TASKS_FAIL: return fetchTasksFail(state, action)\n\n        case actionTypes.UPDATE_ID_SUCCESS: return updateId(state, action)\n        case actionTypes.POST_TASK_SUCCESS: return postTaskSuccess(state, action)\n        case actionTypes.POST_TASK_FAIL: return postTaskFail(state, action)\n\n        case actionTypes.PUT_TASK_SUCCESS: return putTaskSuccess(state, action)\n        case actionTypes.PUT_TASK_FAIL: return putTaskFail(state, action)\n\n        case actionTypes.DELETE_OR_FINISH_TASK_SUCCESS: return deleteOrFinishTaskSuccess(state, action)\n        case actionTypes.DELETE_OR_FINISH_TASK_FAIL: return deleteOrFinishTaskFail(state, action)\n        default: return state\n    }\n\n}\n\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux'\nimport thunk from 'redux-thunk'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport authReducer from './store/reducers/auth'\nimport todoReducer from './store/reducers/toDoList'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({\n  todo: todoReducer,\n  auth: authReducer\n})\n\nconst store = createStore(rootReducer, composeEnhancers(\n  applyMiddleware(thunk)\n))\n\nconst app = (\n  <Provider store={store}>\n    <HashRouter basename='/'>\n      <App />\n    </HashRouter>\n  </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}