{"version":3,"sources":["assets/illustration.svg","helpers/helpers.js","sharedComponent/Line/Line.js","components/Logo/Logo.js","components/Header/Header.js","components/Buttons/addNewTaskButton.js","components/Buttons/DoneExitBtns.js","components/Buttons/EditBtnInput.js","store/actions/auth.js","store/actions/actionTypes.js","store/actions/to-do-list.js","components/Tasks/Task.js","components/Tasks/Tasks.js","components/AddTask/AddTask.js","containers/ToDoList/ToDoList.js","components/Buttons/AuthBtns/AuthBtn/AuthBtn.js","components/Buttons/AuthBtns/AuthBtns.js","sharedComponent/Backdrop/Backdrop.js","sharedComponent/Modal/Modal.js","components/Input/Input.js","containers/Auth/Auth.js","sharedComponent/Spinner/Spinner.js","containers/Main/Main.js","App.js","serviceWorker.js","store/utility.js","store/reducers/auth.js","store/reducers/to-do-list.js","index.js"],"names":["module","exports","makeid","length","result","characters","charactersLength","i","charAt","Math","floor","random","formatTime","time","line","className","Logo","now","Date","day","getDate","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","getCurrentTime","Header","addTaskBtn","props","onClick","click","children","DoneExitBtns","update","cancel","InputAndBtns","value","spanHeight","change","closeTextArea","textAreaRef","useRef","useEffect","nextHeight","min","textAreaPaddingTop","parseFloat","window","getComputedStyle","current","getPropertyValue","style","height","rows","scrollHeight","spanHeightWithOneLine","type","autoFocus","ref","onChange","onKeyDown","event","keyCode","preventDefault","target","authSuccess","token","userId","idToken","logout","localStorage","removeItem","authCheckState","dispatch","expirationTime","getItem","expirationDate","getTime","setTimeout","postTasks","task","console","log","axios","post","then","res","data","name","catch","error","errorMessage","response","message","toLowerCase","split","join","postTasksFail","connect","state","tasks","todo","auth","onFinishOrDeleteTask","id","actions","onTaskUpdate","description","useState","isEdit","setIsEdit","setSpanHeight","initialValue","setNewValue","spanRef","documentClickHandler","classList","includes","closeEditTextArea","offsetHeight","document","addEventListener","removeEventListener","finishOrDeleteTask","EditBtnInput","version","xmlns","xmlnsXlink","x","y","viewBox","enableBackground","xmlSpace","points","strokeLinecap","onAnimationEnd","Tasks","TransitionGroup","map","el","CSSTransition","key","timeout","classNames","AddTask","cancelClick","onAdd","placeholder","ToDoList","isShownAddTaskInput","addInputValue","addNewTaskBtnHandler","setState","cancelAddingTaskHandler","addInputChangeHandler","addTaskBtnHandler","newTask","onAddTask","this","onFetchTasks","src","illustration","alt","Component","queryParams","get","fetchedTasks","push","fetchTasksFail","authBtn","disabled","authBtns","backdrop","clicked","show","Modal","backDropClick","transform","opacity","input","elementConfig","invalid","shouldValidate","touched","changed","label","inputClasses","inputElement","Auth","controls","userName","valid","validation","required","onlyLettersAndNumbers","minLength","password","switchAuthModeHandler","onAuthSwitchMode","isSignUp","inputChangedHandler","controlName","updatedControls","checkValidity","submitHandler","onAuth","rules","isValid","trim","test","formElementsArr","config","form","formElement","onSubmit","username","authData","email","returnSecureToken","url","expiresIn","setItem","localId","authFail","spinner","Main","history","isFormShown","onBackdropClick","loading","AuthBtns","onAuthBtnClick","App","onTryAutoSignUp","routes","path","component","isAuth","from","to","withRouter","Boolean","location","hostname","match","updateObj","oldObj","updatedProps","initialState","authStart","action","switchAuthMode","authLogout","authBtnClick","closeForm","reducer","addTask","updatedTasks","filter","cur","updateTask","forEach","postTasksSuccess","fetchTasksSuccess","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","todoReducer","authReducer","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.226f7c17.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/illustration.bfcc6550.svg\";","//Generate Random String (creating a unique ID)\nexport function makeid(length = 5) {\n    let result = ''\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n    const charactersLength = characters.length\n    for (let i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength))\n    }\n    return result\n}\n\n\nexport function getCurrentTime() {\n\n    const now = new Date()\n    const day = now.getDate()\n\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    const curMonth = now.getMonth()\n    const month = months[curMonth]\n    const year = now.getFullYear()\n    let hours = now.getHours()\n    hours = formatTime(hours)\n    let minutes = now.getMinutes()\n    minutes = formatTime(minutes)\n\n    return { day, month, year, hours, minutes }\n}\n\nfunction formatTime(time) {\n    return time < 10 ? `0${time}` : time\n}","import React from 'react'\nimport './Line.scss'\nconst line = ({ className = '' }) => {\n    return (\n        <div className={`line ${className}`}></div>\n    )\n}\n\nexport default line ","import React from 'react'\nimport './Logo.scss'\n\nconst Logo = () => (\n    <div>\n        <h1 className=\"logo\">My To-Do List</h1>\n        <span className=\"logo__author\">By Anna Sviatelyk</span>\n    </div>\n)\n\nexport default Logo","import React from 'react'\nimport './Header.scss'\nimport { getCurrentTime } from '../../helpers/helpers'\nimport Line from '../../sharedComponent/Line/Line'\nimport Logo from '../Logo/Logo'\n\n\nconst { day, month, year, hours, minutes } = getCurrentTime();\n\n\nconst Header = () => {\n    return (\n        <>\n            <header className=\"header\">\n                <Logo />\n                <div className=\"header__date-and-time\">\n                    <span className=\"header__data-label\">Today</span>\n                    <span className=\"header__data header__data--date\">{month} {day}, {year}</span>\n                    <span className=\"header__data-label\">Time</span>\n                    <span className=\"header__data header__data--time\">{hours}:{minutes}</span>\n                </div>\n            </header>\n            <Line />\n        </>\n    )\n}\n\n\n\nexport default Header","import React from 'react'\nimport './addNewTaskButton.scss'\n\nconst addTaskBtn = (props) => {\n    return (\n        <div className=\"new-item\" onClick={props.click}>\n            <i className=\"new-item__plus-icon\"></i>\n            <span className=\"new-item__label\">{props.children}</span>\n        </div>\n    )\n}\n\nexport default addTaskBtn","import React from 'react'\nimport '../Tasks/Task.scss'\n\n\nconst DoneExitBtns = ({ update, cancel }) => {\n    return (\n        <div className=\"task__btns\">\n            <i className=\"task__btn-done\" onClick={update}></i>\n            <i className=\"task__btn-exit-edit\" onClick={cancel}></i>\n        </div>\n    )\n\n}\n\nexport default DoneExitBtns","import React, { useEffect, useRef } from 'react'\nimport '../Tasks/Task.scss'\n\nconst maxTextAreaHeight = 100\nconst spanHeightWithOneLine = 37\n\nconst InputAndBtns = ({ value, spanHeight, change, closeTextArea }) => {\n    const textAreaRef = useRef(null)\n    let className = value ? '' : 'task__edit-input-text--invalid'\n\n    useEffect(() => {\n        let nextHeight = Math.min(maxTextAreaHeight, spanHeight)\n        const textAreaPaddingTop = parseFloat(window.getComputedStyle(textAreaRef.current, null).getPropertyValue('padding-top'))\n        textAreaRef.current.style.height = nextHeight + (2 * textAreaPaddingTop) + 'px'\n\n        if (value) {\n            textAreaRef.current.rows = 1\n            textAreaRef.current.style.height = 'auto'\n            nextHeight = Math.min(maxTextAreaHeight, textAreaRef.current.scrollHeight)\n            textAreaRef.current.style.height = nextHeight + 'px'\n        } else {\n            textAreaRef.current.style.height = spanHeightWithOneLine + 'px'\n        }\n\n    }, [value, spanHeight])\n\n    const keyPressHandler = (event) => {\n        if (event.keyCode === 13) {\n            event.preventDefault();\n            if (event.target.value.length > 0) {\n                closeTextArea()\n            }\n        }\n    }\n\n    return (\n        <textarea\n            className={`task__edit-input-text ${className}`}\n            type=\"text\"\n            autoFocus\n            ref={textAreaRef}\n            onChange={change}\n            onKeyDown={keyPressHandler}\n            value={value} />\n    )\n\n}\n\n\nexport default InputAndBtns","import * as actionTypes from './actionTypes'\nimport axios from 'axios'\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START\n    }\n}\n\nexport const authSuccess = (token, userId) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        idToken: token,\n        userId: userId\n\n    }\n}\n\nexport const authBtnClick = (isSignUp, isFormShown) => {\n    return {\n        type: actionTypes.AUTH_BTN_CLICK,\n        isSignUp,\n        isFormShown\n    }\n}\n\nexport const authFail = (error) => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error\n\n    }\n}\n\nexport const closeForm = () => {\n    return {\n        type: actionTypes.CLOSE_FORM,\n        isFormShown: false,\n        error: null\n    }\n}\n\nexport const switchAuthMode = (isSignUp) => {\n    return {\n        type: actionTypes.SWITCH_AUTH_MODE,\n        isSignUp\n    }\n}\n\nexport const checkAuthTimeOut = (expirationTime) => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout())\n        }, expirationTime * 1000)\n    }\n\n}\n\nexport const logout = () => {\n    localStorage.removeItem('token')\n    localStorage.removeItem('expirationDate')\n    localStorage.removeItem('userId')\n    return {\n        type: actionTypes.AUTH_LOGOUT\n    }\n}\n\n\nexport const auth = (username, password, isSignUp) => {\n    return dispatch => {\n        dispatch(authStart())\n\n        const authData = {\n            username: username,\n            email: `${username}@todo.list`,\n            password: password,\n            returnSecureToken: true\n        }\n        console.log(authData.username)\n\n        let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBTkC5sKi6tMveqTPRvodHeA42E495rGng'\n\n        if (!isSignUp) {\n            url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBTkC5sKi6tMveqTPRvodHeA42E495rGng'\n        }\n\n        axios.post(url, authData)\n            .then(response => {\n                const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000)\n                localStorage.setItem('token', response.data.idToken)\n                localStorage.setItem('expirationDate', expirationDate)\n                localStorage.setItem('userId', response.data.localId)\n                dispatch(authSuccess(response.data.idToken, response.data.localId))\n            })\n            .catch(error => {\n                const errorMessage = error.response.data.error.message.toLowerCase().split('_').join(' ')\n\n                dispatch(authFail(errorMessage))\n            })\n    }\n}\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token')\n        if (!token) {\n            dispatch(logout())\n        } else {\n            const expirationDate = new Date(localStorage.getItem('expirationDate'))\n            if (expirationDate <= new Date()) {\n                dispatch(logout())\n            } else {\n                const userId = localStorage.getItem('userId')\n                dispatch(authSuccess(token, userId))\n                dispatch(checkAuthTimeOut((expirationDate.getTime() - new Date().getTime()) / 1000))\n            }\n        }\n    }\n}","//AUTH ACTIONS\nexport const AUTH_START = 'AUTH_START'\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS'\nexport const AUTH_FAIL = 'AUTH_FAIL'\nexport const SWITCH_AUTH_MODE = 'SWITCH_AUTH_MODE'\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT'\n\nexport const AUTH_BTN_CLICK = 'AUTH_BTN_CLICK'\nexport const CLOSE_FORM = 'CLOSE_FORM'\n\n\n\n//TO-DO-LIST ACTIONS\nexport const ADD_TASK = 'ADD_TASK'\nexport const FINISH_OR_DELETE_TASK = 'FINISH_OR_DELETE_TASK'\nexport const UPDATE_TASK = 'UPDATE_TASK'\n\nexport const POST_TASKS_START = 'POST_POST_TASKS_START'\nexport const POST_TASKS_SUCCESS = 'POST_TASKS_SUCCESS'\nexport const POST_TASKS_FAIL = 'POST_TASKS_FAIL'\n\nexport const FETCH_TASKS_START = 'FETCH_TASKS_START'\nexport const FETCH_TASKS_SUCCESS = 'FETCH_TASKS_SUCCESS'\nexport const FETCH_TASKS_FAIL = 'FETCH_TASKS_FAIL'\n\n\n","import * as actionTypes from './actionTypes'\nimport axios from 'axios'\n\n\n\nexport const addTask = (description, id) => {\n    return {\n        type: actionTypes.ADD_TASK,\n        description,\n        id\n    }\n}\n\n\nexport const finishOrDeleteTask = (id) => {\n    return {\n        type: actionTypes.FINISH_OR_DELETE_TASK,\n        id\n    }\n}\n\n\nexport const updateTask = (description, id) => {\n    return {\n        type: actionTypes.UPDATE_TASK,\n        description,\n        id\n    }\n}\n\nexport const fetchTasksStart = () => {\n    return {\n        type: actionTypes.FETCH_TASKS_START\n    }\n}\n\nexport const fetchTasksSuccess = (tasks) => {\n    return {\n        type: actionTypes.FETCH_TASKS_SUCCESS,\n        tasks\n    }\n\n}\n\nexport const fetchTasksFail = (error) => {\n    return {\n        type: actionTypes.FETCH_TASKS_FAIL,\n        error\n    }\n}\n\n// export const postTasksStart = () => {\n//     return {\n//         type: actionTypes.POST_TASKS_START\n//     }\n// }\n\n\nexport const postTasksSuccess = (data) => {\n    return {\n        type: actionTypes.POST_TASKS_SUCCESS,\n        data\n    }\n}\n\nexport const postTasksFail = (error) => {\n    return {\n        type: actionTypes.POST_TASKS_FAIL,\n        error\n    }\n}\n\nexport const postTasks = (token, task, userId) => {\n    console.log(userId)\n    return dispatch => {\n        axios.post('https://my-to-do-list-on-react.firebaseio.com/tasks/' + userId + '.json?auth=' + token, { ...task })\n            .then(res => {\n                dispatch(postTasksSuccess(res.data.name))\n            })\n            .catch(error => {\n                const errorMessage = error.response.data.error.message.toLowerCase().split('_').join(' ')\n                dispatch(postTasksFail(errorMessage))\n            })\n\n    }\n}\n\n\n\nexport const fetchTasks = (token, userId) => {\n    return dispatch => {\n        dispatch(fetchTasksStart())\n\n        const queryParams = '?auth=' + token\n        axios.get('https://my-to-do-list-on-react.firebaseio.com/tasks/' + userId + '.json' + queryParams)\n            .then(res => {\n                const fetchedTasks = []\n                for (let key in res.data) {\n                    fetchedTasks.push({\n                        ...res.data[key],\n                        id: key\n                    })\n                }\n                dispatch(fetchTasksSuccess(fetchedTasks ? fetchedTasks : []))\n            })\n            .catch(error => {\n                dispatch(fetchTasksFail(error))\n            }\n            )\n    }\n\n}","import React, { useState, useEffect, useRef } from 'react'\nimport { connect } from 'react-redux'\nimport './Task.scss'\nimport Line from '../../sharedComponent/Line/Line'\nimport DoneExitBtns from '../Buttons/DoneExitBtns'\nimport EditBtnInput from '../Buttons/EditBtnInput'\nimport * as actions from '../../store/actions/index'\n\n\nconst Task = ({ data, onFinishOrDeleteTask, onTaskUpdate, postTasks, tasks, token, userId }) => {\n    const [isEdit, setIsEdit] = useState(false)\n    const [spanHeight, setSpanHeight] = useState(37)\n    const [initialValue, setNewValue] = useState(data.description)\n    const spanRef = useRef(null)\n\n    const documentClickHandler = (event) => {\n        const ignoringElements = ['task__edit-input-text', 'task__btn-done', 'task__btn-exit-edit']\n        const className = event.target.classList[0]\n        if (!ignoringElements.includes(className)) { closeEditTextArea() }\n    }\n\n    const openEditTextArea = () => { setIsEdit(true) }\n\n    useEffect(() => {\n        const spanHeight = spanRef.current.offsetHeight\n        setSpanHeight(spanHeight)\n    }, [])\n\n    useEffect(() => {\n        if (isEdit) {\n            document.addEventListener('click', documentClickHandler)\n        }\n        return () => document.removeEventListener('click', documentClickHandler)\n        // eslint-disable-next-line\n    }, [isEdit, initialValue])\n\n\n    const closeEditTextArea = () => {\n        if (initialValue.length > 0) {\n            setIsEdit(false)\n            onTaskUpdate(initialValue, data.id)\n            postTasks(token, tasks, userId)\n        }\n    }\n\n    const updateValue = (event) => {\n        const value = event.target.value\n        setNewValue(value)\n    }\n\n    const cancelValueUpdate = () => {\n        setIsEdit(false)\n        setNewValue(data.description)\n    }\n\n    const finishOrDeleteTask = () => {\n        onFinishOrDeleteTask(data.id)\n        postTasks(token, tasks, userId)\n    }\n\n    return (\n        <div className=\"task\">\n            <div className=\"task__content-wrapper\">\n                <div className=\"task__description\">\n                    {isEdit ? <EditBtnInput change={updateValue} closeTextArea={closeEditTextArea} value={initialValue} spanHeight={spanHeight} /> : (\n                        <>\n                            <label className='task__checkbox' >\n                                <input type=\"checkbox\" name=\"check\" />\n                                <svg version=\"1.1\" className=\"task__checkbox_svg\" xmlns=\"http://www.w3.org/2000/svg\"\n                                    xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\"\n                                    style={{ enableBackground: \"new 0 0 100 100\" }} xmlSpace=\"preserve\">\n                                    <polyline className=\"task__checkbox_line\" points=\"3.5,45.5 40.5,82.5 95.7,15.3 \"\n                                        strokeLinecap=\"round\" onAnimationEnd={finishOrDeleteTask} /></svg>\n                            </label>\n\n                            <span className=\"task__name\" ref={spanRef}>{initialValue}</span>\n                        </>\n                    )}\n                </div>\n                {isEdit ?\n                    <DoneExitBtns update={closeEditTextArea} cancel={cancelValueUpdate} />\n                    :\n                    (<div className=\"task__btns\">\n                        <i className=\"task__btn-edit\" onClick={openEditTextArea}></i>\n                        <i className=\"task__btn-delete\" onClick={finishOrDeleteTask}></i>\n                    </div>)\n                }\n            </div>\n            <Line className='line__in-task' />\n        </div >\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        tasks: state.todo.tasks,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFinishOrDeleteTask: (id) => dispatch(actions.finishOrDeleteTask(id)),\n        onTaskUpdate: (description, id) => dispatch(actions.updateTask(description, id)),\n        postTasks: (token, tasks) => dispatch(actions.postTasks(token, tasks))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Task)","import React from 'react'\nimport './Tasks.scss'\nimport Task from './Task'\nimport './Task.scss'\nimport {\n    CSSTransition,\n    TransitionGroup,\n} from 'react-transition-group';\n\n\n\nconst Tasks = ({ tasks }) => {\n\n    return (\n        <TransitionGroup className=\"tasks-container\">\n            {\n                tasks.map(el => {\n                    return (\n                        <CSSTransition\n                            key={el.id}\n                            timeout={300}\n                            classNames=\"task\"\n                        >\n                            <Task data={el} />\n                        </CSSTransition>\n                    )\n                })\n            }\n\n        </TransitionGroup>\n    )\n\n}\n\nexport default Tasks","import React from 'react'\nimport './AddTask.scss'\n\nconst AddTask = ({ value, cancelClick, onChange, onAdd }) => {\n    const keyPressHandler = (event) => {\n        if (event.keyCode === 13) {\n            event.preventDefault();\n            if (event.target.value !== '') {\n                onAdd(value.length)\n            }\n        }\n    }\n\n    return (\n        <div className=\"add-new-item\">\n            <div className=\"add-new-item__description-field\">\n                <input\n                    type=\"text\"\n                    className=\"add-new-item__description\"\n                    placeholder=\"E.g. Start working on new project...\"\n                    onChange={onChange}\n                    onKeyDown={keyPressHandler}\n                />\n            </div>\n\n            <div className=\"add-new-item__buttons\">\n                <button className={`add-new-item__btn-add-task ${value.length ? '' : ' add-new-item__btn-add-task--disabled'}`} onClick={() => onAdd(value.length)}> Add task</button>\n                <button className=\"add-new-item__btn-cancel\" onClick={cancelClick}>Cancel</button>\n            </div>\n        </div>\n    )\n}\n\nexport default AddTask","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport './ToDoList.scss';\nimport Header from '../../components/Header/Header'\nimport illustration from '../../assets/illustration.svg'\nimport AddTaskBtn from '../../components/Buttons/addNewTaskButton'\nimport Tasks from '../../components/Tasks/Tasks'\nimport AddTask from '../../components/AddTask/AddTask'\nimport * as actions from '../../store/actions/index'\nimport { makeid } from '../../helpers/helpers';\n\n\nclass ToDoList extends Component {\n    state = {\n        isShownAddTaskInput: false,\n        addInputValue: '',\n    }\n\n    componentDidMount() {\n        this.props.onFetchTasks(this.props.token, this.props.userId)\n    }\n\n\n    addNewTaskBtnHandler = () => { this.setState({ isShownAddTaskInput: true }) }\n\n    cancelAddingTaskHandler = () => {\n        this.setState({\n            isShownAddTaskInput: false,\n            addInputValue: ''\n        })\n    }\n\n    addInputChangeHandler = (event) => {\n        this.setState({\n            addInputValue: event.target.value\n        })\n    }\n\n    addTaskBtnHandler = (length) => {\n        if (length > 0) {\n            const newTask = {\n                description: this.state.addInputValue,\n                id: makeid(),\n                userId: this.props.userId\n            }\n\n            this.props.onAddTask(newTask.description, newTask.id)\n            this.props.postTasks(this.props.token, newTask, this.props.userId)\n            this.setState({\n                isShownAddTaskInput: false,\n                addInputValue: ''\n            })\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Header />\n                <img src={illustration} alt=\"time management illustration\" className=\"illustration\" />\n                <Tasks tasks={this.props.tasks} />\n                {this.state.isShownAddTaskInput ?\n                    <AddTask\n                        cancelClick={this.cancelAddingTaskHandler}\n                        value={this.state.addInputValue}\n                        onChange={this.addInputChangeHandler}\n                        onAdd={this.addTaskBtnHandler}\n                    /> : <AddTaskBtn click={this.addNewTaskBtnHandler}>Add new task</AddTaskBtn>}\n\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        tasks: state.todo.tasks,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAddTask: (description, id) => dispatch(actions.addTask(description, id)),\n        postTasks: (token, tasks, userId) => dispatch(actions.postTasks(token, tasks, userId)),\n        onFetchTasks: (token, userId) => dispatch(actions.fetchTasks(token, userId))\n    }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ToDoList)\n","import React from 'react'\nimport './AuthBtn.scss'\n\n\nconst authBtn = ({ children, type, click, disabled }) => {\n    let className = null\n    if (type === 'with-background') { className = 'authBtn' }\n    if (type === 'with-border') { className = 'authBtn authBtn--with-border' }\n    if (type === 'text-btn') { className = 'authBtn authBtn--text' }\n    if (type === 'with-background-wide') { className = 'authBtn authBtn--wide' }\n\n    return (\n        <button className={className} onClick={click} disabled={disabled}>{children}</button>\n    )\n\n}\n\n\nexport default authBtn","import React from 'react'\nimport AuthBtn from './AuthBtn/AuthBtn'\n\nconst authBtns = ({ click }) => (\n    <div className='authBtns-container'>\n        <AuthBtn type='with-border' click={() => click(false, true)}>Login</AuthBtn>\n        <AuthBtn type='with-background' click={() => click(true, true)}>Register</AuthBtn>\n    </div>\n)\n\nexport default authBtns","import React from 'react'\nimport './Backdrop.scss'\n\nconst backdrop = ({ clicked, show }) => (\n    show ? <div className='Backdrop' onClick={clicked}></div> : null\n)\n\nexport default backdrop","import React, { Component } from 'react'\nimport Backdrop from '../Backdrop/Backdrop'\nimport './Modal.scss'\n\nclass Modal extends Component {\n    render() {\n        return (\n            <>\n                <Backdrop show={this.props.show} clicked={this.props.backDropClick} />\n                <div\n                    className='Modal'\n                    style={{\n                        transform: this.props.show ? 'translateY(0)' : 'translateY(-100vh)',\n                        opacity: this.props.show ? '1' : 0\n                    }}>\n                    {this.props.children}\n                </div>\n            </>\n        )\n    }\n}\n\n\nexport default Modal","import React from 'react'\nimport './Input.scss'\n\nconst input = ({ elementConfig, invalid, shouldValidate, touched, value, changed, label }) => {\n    const inputClasses = ['input']\n\n    if (invalid && shouldValidate && touched) {\n        inputClasses.push('input--invalid')\n    }\n\n    let inputElement = <input\n        className={inputClasses.join(' ')}\n        {...elementConfig}\n        value={value}\n        onChange={changed}\n    />\n\n    return (\n        <div className='Input'>\n            <label className='Label'>{label}</label>\n            {inputElement}\n            {/* {validationError} */}\n        </div>\n    )\n}\n\n\nexport default input","import React, { Component, Fragment } from 'react'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions/index'\nimport './Auth.scss'\nimport Input from '../../components/Input/Input'\nimport AuthBtn from '../../components/Buttons/AuthBtns/AuthBtn/AuthBtn'\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            userName: {\n                elementConfig: {\n                    type: 'input',\n                    placeholder: \"User Name\"\n                },\n                value: '',\n                touched: false,\n                valid: false,\n                validation: {\n                    required: true,\n                    onlyLettersAndNumbers: true,\n                    minLength: 4\n                }\n            },\n\n            password: {\n                elementConfig: {\n                    type: 'password',\n                    placeholder: \"Password\"\n                },\n                value: '',\n                touched: false,\n                valid: false,\n                validation: {\n                    required: true,\n                    minLength: 6\n                }\n            },\n        },\n        errorMessage: this.props.errorMessage\n    }\n\n    checkValidity(value, rules) {\n        let isValid = true;\n\n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.onlyLettersAndNumbers) {\n            const pattern = /^[0-9a-zA-Z]+$/\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n        return isValid;\n    }\n\n    switchAuthModeHandler = () => { this.props.onAuthSwitchMode(!this.props.isSignUp) }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            },\n        }\n        this.setState({ controls: updatedControls, errorMessage: null })\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault()\n        this.props.onAuth(this.state.controls.userName.value, this.state.controls.password.value, this.props.isSignUp)\n    }\n\n    render() {\n        const formElementsArr = [];\n        for (let key in this.state.controls) {\n            formElementsArr.push({\n                id: key,\n                config: this.state.controls[key]\n            })\n        }\n\n        const form = formElementsArr.map(formElement => {\n            let errorMessage = null\n            if (!formElement.config.valid && formElement.config.touched && formElement.id === 'userName') {\n                errorMessage = 'Username must be at least 4 characters long and contain only letters and numbers '\n            }\n            if (!formElement.config.valid && formElement.config.touched && formElement.id === 'password') {\n                errorMessage = 'Password must be at least 6 characters long'\n            }\n\n            return (\n                <Fragment key={formElement.id}>\n                    <Input\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}\n                        shouldValidate={formElement.config.validation}\n                        invalid={!formElement.config.valid}\n                    />\n                    <p className='auth__error-message'>{errorMessage === 'Email Exist' ? 'Username exist' : errorMessage}</p>\n                </Fragment>\n            )\n        })\n\n\n        return (\n            <div>\n                <h4 className='auth__welcome'>{this.props.isSignUp ? 'Welcome to our app!' : 'Welcome back!'}</h4>\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <p className='auth__error-message auth__error-message--capitalize'>{this.state.errorMessage}</p>\n                    <AuthBtn type='with-background-wide' disabled={this.state.controls.userName.valid && this.state.controls.password.valid ? false : true}>Submit</AuthBtn>\n                </form>\n                <p className='toSignIn'>{this.props.isSignUp ? 'Already have an account?' : `Don't have an account?`}</p>\n                <AuthBtn type='text-btn' click={this.switchAuthModeHandler}>{this.props.isSignUp ? 'Sign in' : 'Sign up'}</AuthBtn>\n            </div >\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isSignUp: state.auth.isSignUp,\n        errorMessage: state.auth.error,\n        token: state.auth.token\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (userName, password, isSignUp) => dispatch(actions.auth(userName, password, isSignUp)),\n        onAuthSwitchMode: (isSignUp) => dispatch(actions.switchAuthMode(isSignUp)).errorMessage\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth)","import React from 'react'\nimport './Spinner.scss'\n\nconst spinner = () => (\n    <div className=\"loader\">Loading...</div>\n)\n\n\nexport default spinner","import React, { Component } from 'react'\nimport './Main.scss'\nimport { connect } from 'react-redux'\nimport Logo from '../../components/Logo/Logo'\nimport AuthBtns from '../../components/Buttons/AuthBtns/AuthBtns'\nimport Modal from '../../sharedComponent/Modal/Modal'\nimport Auth from '../Auth/Auth'\nimport * as actions from '../../store/actions/index'\nimport Spinner from '../../sharedComponent/Spinner/Spinner'\n\n\n\nclass Main extends Component {\n    render() {\n        if (this.props.token) {\n            this.props.history.push('/to-do-list')\n        }\n        let form = null\n\n        if (this.props.isFormShown) {\n            form = (\n                <Modal show={this.props.isFormShown} backDropClick={this.props.onBackdropClick}>\n                    {this.props.loading ? <Spinner /> : <Auth isSignUp={this.props.isSignUp} />}\n                </Modal>\n            )\n        }\n        return (\n            <div className='Main'>\n                {form}\n                <div className='Main__header'>\n                    <Logo />\n                </div>\n                <h1 className='Main__heading'>All your tasks <br /> managed in one place</h1>\n                <p className='Main__sub-heading'>My To-Do List is a useful tool for everyone, <br /> who wants to keep their everyday routine under control.</p>\n                <AuthBtns click={this.props.onAuthBtnClick} />\n                <div className=\"Main__illustration-container\" />\n            </div >\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isSignUp: state.auth.isSignUp,\n        isFormShown: state.auth.isFormShown,\n        loading: state.auth.loading,\n        token: state.auth.token\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuthBtnClick: (isSignUp, isFormShown) => dispatch(actions.authBtnClick(isSignUp, isFormShown)),\n        onBackdropClick: () => dispatch(actions.closeForm())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main)","import React, { Component } from 'react';\nimport { Route, Switch, withRouter, Redirect } from 'react-router-dom'\nimport './App.css';\nimport ToDoList from './containers/ToDoList/ToDoList'\nimport Main from './containers/Main/Main'\nimport { connect } from 'react-redux'\nimport * as actions from './store/actions/index'\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onTryAutoSignUp()\n  }\n\n  render() {\n\n    let routes = (<Switch>\n      <Route path='/' component={Main} />\n      {this.props.isAuth ? <Redirect from='/' to='/to-do-list' /> : <Redirect to='/' />}\n\n    </Switch>\n    )\n\n\n\n    if (this.props.isAuth) {\n      routes = (\n        <Switch>\n          <Route path='/to-do-list' component={ToDoList} />\n          {/* <Route path='/logout' component={Logout} /> */}\n          <Redirect to='/to-do-list' />\n        </Switch>\n      )\n    }\n\n    return (\n      <div className=\"App\" >\n        {routes}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    isAuth: state.auth.token !== null\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTryAutoSignUp: () => dispatch(actions.authCheckState())\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const updateObj = (oldObj, updatedProps) => {\n    return {\n        ...oldObj,\n        ...updatedProps\n    }\n}","import * as actionTypes from '../actions/actionTypes'\nimport { updateObj } from '../utility'\n\nconst initialState = {\n    isSignUp: false,\n    isFormShown: false,\n    loading: false,\n\n    token: null,\n    userId: null,\n    error: null\n}\n\nconst authStart = (state) => {\n    return updateObj(state, {\n        error: null,\n        loading: true\n    })\n}\n\nconst authSuccess = (state, action) => {\n    return updateObj(state, {\n        token: action.idToken,\n        userId: action.userId,\n        error: null,\n        loading: false,\n        isFormShown: false\n    })\n}\n\nconst authFail = (state, action) => {\n    return updateObj(state, {\n        error: action.error,\n        loading: false\n    })\n}\n\nconst switchAuthMode = (state, action) => {\n    return updateObj(state, { isSignUp: action.isSignUp })\n}\n\nconst authLogout = (state) => {\n    return updateObj(state, {\n        token: null,\n        userId: null\n    })\n}\n\nconst authBtnClick = (state, action) => {\n    return updateObj(state, {\n        isSignUp: action.isSignUp,\n        isFormShown: action.isFormShown\n    })\n}\n\nconst closeForm = (state, action) => {\n    return updateObj(state, {\n        isFormShown: action.isFormShown,\n        error: action.error\n    })\n}\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.AUTH_START: return authStart(state)\n        case actionTypes.AUTH_SUCCESS: return authSuccess(state, action)\n        case actionTypes.AUTH_FAIL: return authFail(state, action)\n        case actionTypes.SWITCH_AUTH_MODE: return switchAuthMode(state, action)\n        case actionTypes.AUTH_LOGOUT: return authLogout(state)\n        case actionTypes.AUTH_BTN_CLICK: return authBtnClick(state, action)\n        case actionTypes.CLOSE_FORM: return closeForm(state, action)\n        default: return state\n\n    }\n}\n\nexport default reducer","import * as actionTypes from '../actions/actionTypes'\nimport { updateObj } from '../utility'\n\n\nconst initialState = {\n    tasks: [],\n    error: null,\n    data: null\n}\n\nconst addTask = (state, action) => {\n    let updatedTasks = [...state.tasks]\n\n    updatedTasks.push({\n        description: action.description,\n        id: action.id\n    })\n\n    return updateObj(state, { tasks: updatedTasks })\n}\n\n\nconst finishOrDeleteTask = (state, action) => {\n    const updatedTasks = state.tasks.filter((cur => cur.id !== action.id))\n    return updateObj(state, { tasks: updatedTasks })\n}\n\n\nconst updateTask = (state, action) => {\n    const updatedTasks = [...state.tasks]\n    updatedTasks.forEach(cur => {\n        if (cur.id === action.id) {\n            cur.description = action.description\n        }\n    })\n\n    return updateObj(state, { tasks: updatedTasks })\n}\n\n\nconst postTasksFail = (state, action) => {\n    return updateObj(state, { error: action.error })\n}\n\nconst postTasksSuccess = (state, action) => {\n    return updateObj(state, { data: action.data, error: null })\n}\n\n\nconst fetchTasksSuccess = (state, action) => {\n    return updateObj(state, { tasks: action.tasks, error: null })\n}\n\nconst fetchTasksFail = (state, action) => {\n    return updateObj(state, { error: action.error })\n}\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_TASK: return addTask(state, action)\n        case actionTypes.FINISH_OR_DELETE_TASK: return finishOrDeleteTask(state, action)\n        case actionTypes.UPDATE_TASK: return updateTask(state, action)\n        case actionTypes.POST_TASKS_SUCCESS: return postTasksSuccess(state, action)\n        case actionTypes.POST_TASKS_FAIL: return postTasksFail(state, action)\n        case actionTypes.FETCH_TASKS_SUCCESS: return fetchTasksSuccess(state, action)\n        case actionTypes.FETCH_TASKS_FAIL: return fetchTasksFail(state, action)\n        default:\n            return state\n\n    }\n\n}\n\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux'\nimport thunk from 'redux-thunk'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport authReducer from './store/reducers/auth'\nimport todoReducer from './store/reducers/to-do-list'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({\n  todo: todoReducer,\n  auth: authReducer\n})\n\nconst store = createStore(rootReducer, composeEnhancers(\n  applyMiddleware(thunk)\n))\n\nconst app = (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}